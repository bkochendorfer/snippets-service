# Generated by Django 2.2.2 on 2019-07-18 10:26

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import snippets.base.fields
import snippets.base.models
import snippets.base.validators
import taggit_selectize.managers
import uuid

class Migration(migrations.Migration):

    replaces = [('base', '0001_initial'), ('base', '0002_auto_20160215_1300'), ('base', '0003_auto_20160324_1340'), ('base', '0004_auto_20160331_1248'), ('base', '0005_auto_20160331_1311'), ('base', '0006_auto_20160331_1320'), ('base', '0007_auto_20160331_1344'), ('base', '0008_auto_20160331_1405'), ('base', '0009_snippet_client_options'), ('base', '0010_auto_20160405_1444'), ('base', '0011_auto_20160407_1435'), ('base', '0012_auto_20160420_1201'), ('base', '0013_auto_20160420_1216'), ('base', '0014_auto_20160419_1316'), ('base', '0015_auto_20160420_1317'), ('base', '0016_auto_20160419_1316'), ('base', '0017_auto_20170609_1246'), ('base', '0018_auto_20170614_0925'), ('base', '0019_auto_20170726_0635'), ('base', '0020_auto_20170726_0636'), ('base', '0021_snippet_on_startpage_5'), ('base', '0022_auto_20170913_0856'), ('base', '0023_auto_20171024_1244'), ('base', '0024_auto_20171024_1244'), ('base', '0025_auto_20171024_1244'), ('base', '0026_snippettemplatevariable_order'), ('base', '0027_auto_20180425_1041'), ('base', '0028_auto_20180426_1021'), ('base', '0029_auto_20180426_0605'), ('base', '0030_auto_20180426_1840'), ('base', '0031_auto_20180515_0733'), ('base', '0032_auto_20180508_1332'), ('base', '0033_auto_20180521_0933'), ('base', '0034_auto_20180521_0934'), ('base', '0035_auto_20180718_0934'), ('base', '0036_snippet_on_startpage_6'), ('base', '0037_snippettemplate_code_name'), ('base', '0038_auto_20180604_1741'), ('base', '0039_snippettemplate_version'), ('base', '0040_auto_20180607_1245'), ('base', '0041_snippettemplate_startpage'), ('base', '0042_auto_20180427_1327'), ('base', '0043_auto_20180604_1007'), ('base', '0044_auto_20180820_1049'), ('base', '0045_auto_20180822_0859'), ('base', '0046_auto_20180917_0933'), ('base', '0047_auto_20180919_0815'), ('base', '0048_auto_20180919_0816'), ('base', '0049_auto_20180925_1059'), ('base', '0050_auto_20180924_0935'), ('base', '0051_addon'), ('base', '0052_auto_20181004_1002'), ('base', '0053_snippet_ready_for_review'), ('base', '0054_asrsnippet_locales'), ('base', '0055_auto_20181009_1234'), ('base', '0056_auto_20181001_0937'), ('base', '0057_auto_20181018_1056'), ('base', '0058_snippet_creator'), ('base', '0059_auto_20181119_1313'), ('base', '0060_auto_20181120_1137'), ('base', '0061_auto_20181116_0810'), ('base', '0062_set_asrsnippet_id_autoincrement_starting_point'), ('base', '0063_auto_20181208_2012'), ('base', '0064_auto_20181208_2014'), ('base', '0065_remove_asrsnippet_target'), ('base', '0066_auto_20181217_1113'), ('base', '0067_auto_20190114_1159'), ('base', '0068_remove_snippet_migrated_to'), ('base', '0069_auto_20190117_1148'), ('base', '0070_auto_20190211_0949'), ('base', '0071_auto_20190306_1058'), ('base', '0072_auto_20190312_1019'), ('base', '0073_newslettertemplate'), ('base', '0074_sendtodevicetemplate'), ('base', '0075_auto_20190314_0752'), ('base', '0076_auto_20190318_1415'), ('base', '0077_auto_20190318_1450'), ('base', '0078_auto_20190321_1350'), ('base', '0079_simpletemplate_button_background_color'), ('base', '0080_auto_20190401_0915'), ('base', '0081_auto_20190402_1318'), ('base', '0082_auto_20190403_0630'), ('base', '0083_simplebelowsearchtemplate'), ('base', '0084_auto_20190404_0806'), ('base', '0085_auto_20190404_0815'), ('base', '0086_auto_20190404_1052'), ('base', '0087_auto_20190404_1052'), ('base', '0088_auto_20190415_0810'), ('base', '0089_auto_20190509_1247'), ('base', '0090_auto_20190509_1300'), ('base', '0091_auto_20190610_0847'), ('base', '0092_auto_20190606_1217'), ('base', '0093_auto_20190618_1325'), ('base', '0094_auto_20190619_1039'), ('base', '0095_auto_20190627_1301'), ('base', '0096_remove_asrsnippet_locales'), ('base', '0097_asrsnippet_tags')]

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ClientMatchRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255, unique=True)),
                ('is_exclusion', models.BooleanField(default=False)),
                ('startpage_version', snippets.base.fields.RegexField(blank=True, max_length=255, validators=[snippets.base.validators.validate_regex])),
                ('name', snippets.base.fields.RegexField(blank=True, max_length=255, validators=[snippets.base.validators.validate_regex])),
                ('version', snippets.base.fields.RegexField(blank=True, max_length=255, validators=[snippets.base.validators.validate_regex])),
                ('appbuildid', snippets.base.fields.RegexField(blank=True, max_length=255, validators=[snippets.base.validators.validate_regex])),
                ('build_target', snippets.base.fields.RegexField(blank=True, max_length=255, validators=[snippets.base.validators.validate_regex])),
                ('locale', snippets.base.fields.RegexField(blank=True, max_length=255, validators=[snippets.base.validators.validate_regex])),
                ('channel', snippets.base.fields.RegexField(blank=True, max_length=255, validators=[snippets.base.validators.validate_regex])),
                ('os_version', snippets.base.fields.RegexField(blank=True, max_length=255, validators=[snippets.base.validators.validate_regex])),
                ('distribution', snippets.base.fields.RegexField(blank=True, max_length=255, validators=[snippets.base.validators.validate_regex])),
                ('distribution_version', snippets.base.fields.RegexField(blank=True, max_length=255, validators=[snippets.base.validators.validate_regex])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='SearchProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('identifier', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='SnippetTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('code', models.TextField(validators=[snippets.base.validators.validate_xml_template])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('hidden', models.BooleanField(default=False, help_text=b'Hide from template selection dropdown')),
                ('priority', models.BooleanField(default=False, help_text=b'Set to true to display first in dropdowns for faster selections', verbose_name=b'Priority template')),
            ],
            options={
                'ordering': ('-priority', 'name'),
            },
        ),
        migrations.CreateModel(
            name='SnippetTemplateVariable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.IntegerField(choices=[(4, b'Main Text'), (0, b'Text'), (2, b'Small Text'), (1, b'Image'), (3, b'Checkbox')], default=0)),
                ('description', models.TextField(blank=True, default=b'')),
                ('template', models.ForeignKey(on_delete='models.PROTECT', related_name='variable_set', to='base.SnippetTemplate')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='TargetedCountry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(choices=[('af', 'Afghanistan (af)'), ('al', 'Albania (al)'), ('dz', 'Algeria (dz)'), ('as', 'American Samoa (as)'), ('ad', 'Andorra (ad)'), ('ao', 'Angola (ao)'), ('ai', 'Anguilla (ai)'), ('aq', 'Antarctica (aq)'), ('ag', 'Antigua and Barbuda (ag)'), ('ar', 'Argentina (ar)'), ('am', 'Armenia (am)'), ('aw', 'Aruba (aw)'), ('au', 'Australia (au)'), ('at', 'Austria (at)'), ('az', 'Azerbaijan (az)'), ('bs', 'Bahamas (bs)'), ('bh', 'Bahrain (bh)'), ('bd', 'Bangladesh (bd)'), ('bb', 'Barbados (bb)'), ('by', 'Belarus (by)'), ('be', 'Belgium (be)'), ('bz', 'Belize (bz)'), ('bj', 'Benin (bj)'), ('bm', 'Bermuda (bm)'), ('bt', 'Bhutan (bt)'), ('bo', 'Bolivia (bo)'), ('ba', 'Bosnia and Herzegovina (ba)'), ('bw', 'Botswana (bw)'), ('bv', 'Bouvet Island (bv)'), ('br', 'Brazil (br)'), ('io', 'British Indian Ocean Territory (io)'), ('vg', 'British Virgin Islands (vg)'), ('bn', 'Brunei Darussalam (bn)'), ('bg', 'Bulgaria (bg)'), ('bf', 'Burkina Faso (bf)'), ('bi', 'Burundi (bi)'), ('kh', 'Cambodia (kh)'), ('cm', 'Cameroon (cm)'), ('ca', 'Canada (ca)'), ('cv', 'Cape Verde (cv)'), ('ky', 'Cayman Islands (ky)'), ('cf', 'Central African Republic (cf)'), ('td', 'Chad (td)'), ('cl', 'Chile (cl)'), ('cn', 'China (cn)'), ('cx', 'Christmas Island (cx)'), ('cc', 'Cocos (Keeling) Islands (cc)'), ('co', 'Colombia (co)'), ('km', 'Comoros (km)'), ('cg', 'Congo-Brazzaville (cg)'), ('cd', 'Congo-Kinshasa (cd)'), ('ck', 'Cook Islands (ck)'), ('cr', 'Costa Rica (cr)'), ('hr', 'Croatia (hr)'), ('cu', 'Cuba (cu)'), ('cy', 'Cyprus (cy)'), ('cz', 'Czech Republic (cz)'), ('dk', 'Denmark (dk)'), ('dj', 'Djibouti (dj)'), ('dm', 'Dominica (dm)'), ('do', 'Dominican Republic (do)'), ('ec', 'Ecuador (ec)'), ('eg', 'Egypt (eg)'), ('sv', 'El Salvador (sv)'), ('gq', 'Equatorial Guinea (gq)'), ('er', 'Eritrea (er)'), ('ee', 'Estonia (ee)'), ('et', 'Ethiopia (et)'), ('fk', 'Falkland Islands (Malvinas) (fk)'), ('fo', 'Faroe Islands (fo)'), ('fj', 'Fiji (fj)'), ('fi', 'Finland (fi)'), ('fr', 'France (fr)'), ('gf', 'French Guiana (gf)'), ('pf', 'French Polynesia (pf)'), ('tf', 'French Southern Territories (tf)'), ('ga', 'Gabon (ga)'), ('gm', 'Gambia (gm)'), ('ge', 'Georgia (ge)'), ('de', 'Germany (de)'), ('gh', 'Ghana (gh)'), ('gi', 'Gibraltar (gi)'), ('gr', 'Greece (gr)'), ('gl', 'Greenland (gl)'), ('gd', 'Grenada (gd)'), ('gp', 'Guadeloupe (gp)'), ('gu', 'Guam (gu)'), ('gt', 'Guatemala (gt)'), ('gg', 'Guernsey (gg)'), ('gn', 'Guinea (gn)'), ('gw', 'Guinea-Bissau (gw)'), ('gy', 'Guyana (gy)'), ('ht', 'Haiti (ht)'), ('hm', 'Heard Island and McDonald Islands (hm)'), ('hn', 'Honduras (hn)'), ('hk', 'Hong Kong (hk)'), ('hu', 'Hungary (hu)'), ('is', 'Iceland (is)'), ('in', 'India (in)'), ('id', 'Indonesia (id)'), ('ir', 'Iran (ir)'), ('iq', 'Iraq (iq)'), ('ie', 'Ireland (ie)'), ('im', 'Isle of Man (im)'), ('il', 'Israel (il)'), ('it', 'Italy (it)'), ('ci', 'Ivory Coast (ci)'), ('jm', 'Jamaica (jm)'), ('jp', 'Japan (jp)'), ('je', 'Jersey (je)'), ('jo', 'Jordan (jo)'), ('kz', 'Kazakhstan (kz)'), ('ke', 'Kenya (ke)'), ('ki', 'Kiribati (ki)'), ('kw', 'Kuwait (kw)'), ('kg', 'Kyrgyzstan (kg)'), ('la', 'Laos (la)'), ('lv', 'Latvia (lv)'), ('lb', 'Lebanon (lb)'), ('ls', 'Lesotho (ls)'), ('lr', 'Liberia (lr)'), ('ly', 'Libya (ly)'), ('li', 'Liechtenstein (li)'), ('lt', 'Lithuania (lt)'), ('lu', 'Luxembourg (lu)'), ('mo', 'Macao (mo)'), ('mk', 'Macedonia, F.Y.R. of (mk)'), ('mg', 'Madagascar (mg)'), ('mw', 'Malawi (mw)'), ('my', 'Malaysia (my)'), ('mv', 'Maldives (mv)'), ('ml', 'Mali (ml)'), ('mt', 'Malta (mt)'), ('mh', 'Marshall Islands (mh)'), ('mq', 'Martinique (mq)'), ('mr', 'Mauritania (mr)'), ('mu', 'Mauritius (mu)'), ('yt', 'Mayotte (yt)'), ('mx', 'Mexico (mx)'), ('fm', 'Micronesia (fm)'), ('md', 'Moldova (md)'), ('mc', 'Monaco (mc)'), ('mn', 'Mongolia (mn)'), ('me', 'Montenegro (me)'), ('ms', 'Montserrat (ms)'), ('ma', 'Morocco (ma)'), ('mz', 'Mozambique (mz)'), ('mm', 'Myanmar (mm)'), ('na', 'Namibia (na)'), ('nr', 'Nauru (nr)'), ('np', 'Nepal (np)'), ('nl', 'Netherlands (nl)'), ('an', 'Netherlands Antilles (an)'), ('nc', 'New Caledonia (nc)'), ('nz', 'New Zealand (nz)'), ('ni', 'Nicaragua (ni)'), ('ne', 'Niger (ne)'), ('ng', 'Nigeria (ng)'), ('nu', 'Niue (nu)'), ('nf', 'Norfolk Island (nf)'), ('kp', 'North Korea (kp)'), ('mp', 'Northern Mariana Islands (mp)'), ('no', 'Norway (no)'), ('ps', 'Occupied Palestinian Territory (ps)'), ('om', 'Oman (om)'), ('pk', 'Pakistan (pk)'), ('pw', 'Palau (pw)'), ('pa', 'Panama (pa)'), ('pg', 'Papua New Guinea (pg)'), ('py', 'Paraguay (py)'), ('pe', 'Peru (pe)'), ('ph', 'Philippines (ph)'), ('pn', 'Pitcairn (pn)'), ('pl', 'Poland (pl)'), ('pt', 'Portugal (pt)'), ('pr', 'Puerto Rico (pr)'), ('qa', 'Qatar (qa)'), ('re', 'Reunion (re)'), ('ro', 'Romania (ro)'), ('ru', 'Russian Federation (ru)'), ('rw', 'Rwanda (rw)'), ('bl', 'Saint Barthélemy (bl)'), ('sh', 'Saint Helena (sh)'), ('kn', 'Saint Kitts and Nevis (kn)'), ('lc', 'Saint Lucia (lc)'), ('mf', 'Saint Martin (mf)'), ('pm', 'Saint Pierre and Miquelon (pm)'), ('vc', 'Saint Vincent and the Grenadines (vc)'), ('ws', 'Samoa (ws)'), ('sm', 'San Marino (sm)'), ('st', 'Sao Tome and Principe (st)'), ('sa', 'Saudi Arabia (sa)'), ('sn', 'Senegal (sn)'), ('rs', 'Serbia (rs)'), ('sc', 'Seychelles (sc)'), ('sl', 'Sierra Leone (sl)'), ('sg', 'Singapore (sg)'), ('sk', 'Slovakia (sk)'), ('si', 'Slovenia (si)'), ('sb', 'Solomon Islands (sb)'), ('so', 'Somalia (so)'), ('za', 'South Africa (za)'), ('gs', 'South Georgia and the South Sandwich Islands (gs)'), ('kr', 'South Korea (kr)'), ('es', 'Spain (es)'), ('lk', 'Sri Lanka (lk)'), ('sd', 'Sudan (sd)'), ('sr', 'Suriname (sr)'), ('sj', 'Svalbard and Jan Mayen (sj)'), ('sz', 'Swaziland (sz)'), ('se', 'Sweden (se)'), ('ch', 'Switzerland (ch)'), ('sy', 'Syria (sy)'), ('tw', 'Taiwan (tw)'), ('tj', 'Tajikistan (tj)'), ('tz', 'Tanzania (tz)'), ('th', 'Thailand (th)'), ('tl', 'Timor-Leste (tl)'), ('tg', 'Togo (tg)'), ('tk', 'Tokelau (tk)'), ('to', 'Tonga (to)'), ('tt', 'Trinidad and Tobago (tt)'), ('tn', 'Tunisia (tn)'), ('tr', 'Turkey (tr)'), ('tm', 'Turkmenistan (tm)'), ('tc', 'Turks and Caicos Islands (tc)'), ('tv', 'Tuvalu (tv)'), ('ae', 'U.A.E. (ae)'), ('vi', 'U.S. Virgin Islands (vi)'), ('ug', 'Uganda (ug)'), ('ua', 'Ukraine (ua)'), ('gb', 'United Kingdom (gb)'), ('us', 'United States (us)'), ('um', 'United States Minor Outlying Islands (um)'), ('uy', 'Uruguay (uy)'), ('uz', 'Uzbekistan (uz)'), ('vu', 'Vanuatu (vu)'), ('va', 'Vatican City (va)'), ('ve', 'Venezuela (ve)'), ('vn', 'Vietnam (vn)'), ('wf', 'Wallis and Futuna (wf)'), ('eh', 'Western Sahara (eh)'), ('ye', 'Yemen (ye)'), ('zm', 'Zambia (zm)'), ('zw', 'Zimbabwe (zw)'), ('ax', 'Åland Islands (ax)')], default='us', max_length=16, unique=True, verbose_name=b'Geolocation Country')),
                ('name', models.CharField(default='TBU', max_length=100)),
                ('priority', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-priority', 'name', 'code'),
                'verbose_name_plural': 'targeted countries',
            },
        ),
        migrations.CreateModel(
            name='Snippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('data', models.TextField(default=b'{}', validators=[snippets.base.validators.validate_xml_variables])),
                ('priority', models.IntegerField(blank=True, default=0)),
                ('disabled', models.BooleanField(default=True)),
                ('publish_start', models.DateTimeField(blank=True, null=True)),
                ('publish_end', models.DateTimeField(blank=True, null=True)),
                ('on_release', models.BooleanField(default=True, verbose_name=b'Release')),
                ('on_beta', models.BooleanField(default=False, verbose_name=b'Beta')),
                ('on_aurora', models.BooleanField(default=False, verbose_name=b'Aurora')),
                ('on_nightly', models.BooleanField(default=False, verbose_name=b'Nightly')),
                ('on_startpage_1', models.BooleanField(default=False, verbose_name=b'Version 1')),
                ('on_startpage_2', models.BooleanField(default=True, verbose_name=b'Version 2')),
                ('on_startpage_3', models.BooleanField(default=True, verbose_name=b'Version 3')),
                ('on_startpage_4', models.BooleanField(default=True, verbose_name=b'Version 4')),
                ('weight', models.IntegerField(choices=[(33, b'Appear 1/3rd as often as an average snippet'), (50, b'Appear half as often as an average snippet'), (66, b'Appear 2/3rds as often as an average snippet'), (100, b'Appear as often as an average snippet'), (150, b'Appear 1.5 times as often as an average snippet'), (200, b'Appear twice as often as an average snippet'), (300, b'Appear three times as often as an average snippet')], default=100, help_text=b'How often should this snippet be shown to users?', verbose_name=b'Prevalence')),
                ('campaign', models.CharField(blank=True, default=b'', help_text=b'Optional campaign name. Will be added in the stats ping.', max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('client_match_rules', models.ManyToManyField(blank=True, to='base.ClientMatchRule', verbose_name=b'Client Match Rules')),
                ('countries', models.ManyToManyField(blank=True, to='base.TargetedCountry', verbose_name=b'Targeted Countries')),
                ('exclude_from_search_providers', models.ManyToManyField(blank=True, to='base.SearchProvider', verbose_name=b'Excluded Search Providers')),
                ('template', models.ForeignKey(on_delete='models.PROTECT', to='base.SnippetTemplate')),
            ],
            options={
                'ordering': ('-modified',),
            },
        ),
        migrations.CreateModel(
            name='JSONSnippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('priority', models.IntegerField(blank=True, default=0)),
                ('disabled', models.BooleanField(default=True)),
                ('icon', models.TextField(help_text=b'Icon should be a 96x96px PNG.')),
                ('text', models.CharField(help_text=b'Maximum length 140 characters.', max_length=140)),
                ('url', models.CharField(max_length=500)),
                ('publish_start', models.DateTimeField(blank=True, null=True)),
                ('publish_end', models.DateTimeField(blank=True, null=True)),
                ('on_release', models.BooleanField(default=True, verbose_name=b'Release')),
                ('on_beta', models.BooleanField(default=False, verbose_name=b'Beta')),
                ('on_aurora', models.BooleanField(default=False, verbose_name=b'Aurora')),
                ('on_nightly', models.BooleanField(default=False, verbose_name=b'Nightly')),
                ('on_startpage_1', models.BooleanField(default=True, verbose_name=b'Version 1')),
                ('weight', models.IntegerField(choices=[(33, b'Appear 1/3rd as often as an average snippet'), (50, b'Appear half as often as an average snippet'), (66, b'Appear 2/3rds as often as an average snippet'), (100, b'Appear as often as an average snippet'), (150, b'Appear 1.5 times as often as an average snippet'), (200, b'Appear twice as often as an average snippet'), (300, b'Appear three times as often as an average snippet')], default=100, help_text=b'How often should this snippet be shown to users?', verbose_name=b'Prevalence')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('client_match_rules', models.ManyToManyField(blank=True, to='base.ClientMatchRule', verbose_name=b'Client Match Rules')),
                ('countries', models.ManyToManyField(blank=True, to='base.TargetedCountry', verbose_name=b'Targeted Countries')),
            ],
            options={
                'ordering': ('-modified',),
                'verbose_name': 'JSON Snippet',
            },
        ),
        migrations.CreateModel(
            name='UploadedFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=snippets.base.models._generate_filename)),
                ('name', models.CharField(max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='JSONSnippetLocale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locale', models.CharField(choices=[('ach', 'ach (Acholi)'), ('af', 'af (Afrikaans)'), ('ak', 'ak (Akan)'), ('am-et', 'am-et (Amharic)'), ('an', 'an (Aragonese)'), ('ar', 'ar (Arabic)'), ('as', 'as (Assamese)'), ('ast', 'ast (Asturian)'), ('az', 'az (Azerbaijani)'), ('be', 'be (Belarusian)'), ('bg', 'bg (Bulgarian)'), ('bm', 'bm (Bambara)'), ('bn-bd', 'bn-BD (Bengali (Bangladesh))'), ('bn-in', 'bn-IN (Bengali (India))'), ('br', 'br (Breton)'), ('brx', 'brx (Bodo)'), ('bs', 'bs (Bosnian)'), ('ca', 'ca (Catalan)'), ('ca-valencia', 'ca-valencia (Catalan (Valencian))'), ('cak', 'cak (Kaqchikel)'), ('cs', 'cs (Czech)'), ('csb', 'csb (Kashubian)'), ('cy', 'cy (Welsh)'), ('da', 'da (Danish)'), ('dbg', 'dbg (Debug Robot)'), ('de', 'de (German)'), ('de-at', 'de-AT (German (Austria))'), ('de-ch', 'de-CH (German (Switzerland))'), ('de-de', 'de-DE (German (Germany))'), ('dsb', 'dsb (Lower Sorbian)'), ('ee', 'ee (Ewe)'), ('el', 'el (Greek)'), ('en-au', 'en-AU (English (Australian))'), ('en-ca', 'en-CA (English (Canadian))'), ('en-gb', 'en-GB (English (British))'), ('en-nz', 'en-NZ (English (New Zealand))'), ('en-us', 'en-US (English (US))'), ('en-za', 'en-ZA (English (South African))'), ('eo', 'eo (Esperanto)'), ('es', 'es (Spanish)'), ('es-ar', 'es-AR (Spanish (Argentina))'), ('es-cl', 'es-CL (Spanish (Chile))'), ('es-es', 'es-ES (Spanish (Spain))'), ('es-mx', 'es-MX (Spanish (Mexico))'), ('et', 'et (Estonian)'), ('eu', 'eu (Basque)'), ('fa', 'fa (Persian)'), ('ff', 'ff (Fulah)'), ('fi', 'fi (Finnish)'), ('fj-fj', 'fj-FJ (Fijian)'), ('fr', 'fr (French)'), ('fur-it', 'fur-IT (Friulian)'), ('fy-nl', 'fy-NL (Frisian)'), ('ga', 'ga (Irish)'), ('ga-ie', 'ga-IE (Irish)'), ('gd', 'gd (Gaelic (Scotland))'), ('gl', 'gl (Galician)'), ('gn', 'gn (Guarani)'), ('gu', 'gu (Gujarati)'), ('gu-in', 'gu-IN (Gujarati (India))'), ('ha', 'ha (Hausa)'), ('he', 'he (Hebrew)'), ('hi', 'hi (Hindi)'), ('hi-in', 'hi-IN (Hindi (India))'), ('hr', 'hr (Croatian)'), ('hsb', 'hsb (Upper Sorbian)'), ('hu', 'hu (Hungarian)'), ('hy-am', 'hy-AM (Armenian)'), ('id', 'id (Indonesian)'), ('ig', 'ig (Igbo)'), ('is', 'is (Icelandic)'), ('it', 'it (Italian)'), ('ja', 'ja (Japanese)'), ('ja-jp-mac', 'ja-JP-mac (Japanese)'), ('ka', 'ka (Georgian)'), ('kk', 'kk (Kazakh)'), ('km', 'km (Khmer)'), ('kn', 'kn (Kannada)'), ('ko', 'ko (Korean)'), ('kok', 'kok (Konkani)'), ('ks', 'ks (Kashmiri)'), ('ku', 'ku (Kurdish)'), ('la', 'la (Latin)'), ('lg', 'lg (Luganda)'), ('lij', 'lij (Ligurian)'), ('ln', 'ln (Lingala)'), ('lo', 'lo (Lao)'), ('lt', 'lt (Lithuanian)'), ('lv', 'lv (Latvian)'), ('mai', 'mai (Maithili)'), ('mg', 'mg (Malagasy)'), ('mi', 'mi (Maori (Aotearoa))'), ('mk', 'mk (Macedonian)'), ('ml', 'ml (Malayalam)'), ('mn', 'mn (Mongolian)'), ('mr', 'mr (Marathi)'), ('ms', 'ms (Malay)'), ('my', 'my (Burmese)'), ('nb-no', 'nb-NO (Norwegian (Bokmål))'), ('ne-np', 'ne-NP (Nepali)'), ('nl', 'nl (Dutch)'), ('nn-no', 'nn-NO (Norwegian (Nynorsk))'), ('nr', 'nr (Ndebele, South)'), ('nso', 'nso (Northern Sotho)'), ('oc', 'oc (Occitan (Lengadocian))'), ('or', 'or (Oriya)'), ('pa', 'pa (Punjabi)'), ('pa-in', 'pa-IN (Punjabi (India))'), ('pl', 'pl (Polish)'), ('pt-br', 'pt-BR (Portuguese (Brazilian))'), ('pt-pt', 'pt-PT (Portuguese (Portugal))'), ('rm', 'rm (Romansh)'), ('ro', 'ro (Romanian)'), ('ru', 'ru (Russian)'), ('rw', 'rw (Kinyarwanda)'), ('sa', 'sa (Sanskrit)'), ('sah', 'sah (Sakha)'), ('sat', 'sat (Santali)'), ('si', 'si (Sinhala)'), ('sk', 'sk (Slovak)'), ('sl', 'sl (Slovenian)'), ('son', 'son (Songhai)'), ('sq', 'sq (Albanian)'), ('sr', 'sr (Serbian)'), ('sr-cyrl', 'sr-Cyrl (Serbian)'), ('sr-latn', 'sr-Latn (Serbian)'), ('ss', 'ss (Siswati)'), ('st', 'st (Southern Sotho)'), ('sv-se', 'sv-SE (Swedish)'), ('sw', 'sw (Swahili)'), ('ta', 'ta (Tamil)'), ('ta-in', 'ta-IN (Tamil (India))'), ('ta-lk', 'ta-LK (Tamil (Sri Lanka))'), ('te', 'te (Telugu)'), ('th', 'th (Thai)'), ('tl', 'tl (Tagalog)'), ('tn', 'tn (Tswana)'), ('tr', 'tr (Turkish)'), ('ts', 'ts (Tsonga)'), ('tsz', 'tsz (Purépecha)'), ('tt-ru', 'tt-RU (Tatar)'), ('uk', 'uk (Ukrainian)'), ('ur', 'ur (Urdu)'), ('uz', 'uz (Uzbek)'), ('ve', 've (Venda)'), ('vi', 'vi (Vietnamese)'), ('wo', 'wo (Wolof)'), ('x-testing', 'x-testing (Testing)'), ('xh', 'xh (Xhosa)'), ('yo', 'yo (Yoruba)'), ('zh-cn', 'zh-CN (Chinese (Simplified))'), ('zh-tw', 'zh-TW (Chinese (Traditional))'), ('zu', 'zu (Zulu)')], default=b'en-us', max_length=32)),
                ('snippet', models.ForeignKey(on_delete='models.CASCADE', related_name='locale_set', to='base.JSONSnippet')),
            ],
        ),
        migrations.CreateModel(
            name='SnippetLocale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locale', models.CharField(choices=[('ach', 'ach (Acholi)'), ('af', 'af (Afrikaans)'), ('ak', 'ak (Akan)'), ('am-et', 'am-et (Amharic)'), ('an', 'an (Aragonese)'), ('ar', 'ar (Arabic)'), ('as', 'as (Assamese)'), ('ast', 'ast (Asturian)'), ('az', 'az (Azerbaijani)'), ('be', 'be (Belarusian)'), ('bg', 'bg (Bulgarian)'), ('bm', 'bm (Bambara)'), ('bn-bd', 'bn-BD (Bengali (Bangladesh))'), ('bn-in', 'bn-IN (Bengali (India))'), ('br', 'br (Breton)'), ('brx', 'brx (Bodo)'), ('bs', 'bs (Bosnian)'), ('ca', 'ca (Catalan)'), ('ca-valencia', 'ca-valencia (Catalan (Valencian))'), ('cak', 'cak (Kaqchikel)'), ('cs', 'cs (Czech)'), ('csb', 'csb (Kashubian)'), ('cy', 'cy (Welsh)'), ('da', 'da (Danish)'), ('dbg', 'dbg (Debug Robot)'), ('de', 'de (German)'), ('de-at', 'de-AT (German (Austria))'), ('de-ch', 'de-CH (German (Switzerland))'), ('de-de', 'de-DE (German (Germany))'), ('dsb', 'dsb (Lower Sorbian)'), ('ee', 'ee (Ewe)'), ('el', 'el (Greek)'), ('en-au', 'en-AU (English (Australian))'), ('en-ca', 'en-CA (English (Canadian))'), ('en-gb', 'en-GB (English (British))'), ('en-nz', 'en-NZ (English (New Zealand))'), ('en-us', 'en-US (English (US))'), ('en-za', 'en-ZA (English (South African))'), ('eo', 'eo (Esperanto)'), ('es', 'es (Spanish)'), ('es-ar', 'es-AR (Spanish (Argentina))'), ('es-cl', 'es-CL (Spanish (Chile))'), ('es-es', 'es-ES (Spanish (Spain))'), ('es-mx', 'es-MX (Spanish (Mexico))'), ('et', 'et (Estonian)'), ('eu', 'eu (Basque)'), ('fa', 'fa (Persian)'), ('ff', 'ff (Fulah)'), ('fi', 'fi (Finnish)'), ('fj-fj', 'fj-FJ (Fijian)'), ('fr', 'fr (French)'), ('fur-it', 'fur-IT (Friulian)'), ('fy-nl', 'fy-NL (Frisian)'), ('ga', 'ga (Irish)'), ('ga-ie', 'ga-IE (Irish)'), ('gd', 'gd (Gaelic (Scotland))'), ('gl', 'gl (Galician)'), ('gn', 'gn (Guarani)'), ('gu', 'gu (Gujarati)'), ('gu-in', 'gu-IN (Gujarati (India))'), ('ha', 'ha (Hausa)'), ('he', 'he (Hebrew)'), ('hi', 'hi (Hindi)'), ('hi-in', 'hi-IN (Hindi (India))'), ('hr', 'hr (Croatian)'), ('hsb', 'hsb (Upper Sorbian)'), ('hu', 'hu (Hungarian)'), ('hy-am', 'hy-AM (Armenian)'), ('id', 'id (Indonesian)'), ('ig', 'ig (Igbo)'), ('is', 'is (Icelandic)'), ('it', 'it (Italian)'), ('ja', 'ja (Japanese)'), ('ja-jp-mac', 'ja-JP-mac (Japanese)'), ('ka', 'ka (Georgian)'), ('kk', 'kk (Kazakh)'), ('km', 'km (Khmer)'), ('kn', 'kn (Kannada)'), ('ko', 'ko (Korean)'), ('kok', 'kok (Konkani)'), ('ks', 'ks (Kashmiri)'), ('ku', 'ku (Kurdish)'), ('la', 'la (Latin)'), ('lg', 'lg (Luganda)'), ('lij', 'lij (Ligurian)'), ('ln', 'ln (Lingala)'), ('lo', 'lo (Lao)'), ('lt', 'lt (Lithuanian)'), ('lv', 'lv (Latvian)'), ('mai', 'mai (Maithili)'), ('mg', 'mg (Malagasy)'), ('mi', 'mi (Maori (Aotearoa))'), ('mk', 'mk (Macedonian)'), ('ml', 'ml (Malayalam)'), ('mn', 'mn (Mongolian)'), ('mr', 'mr (Marathi)'), ('ms', 'ms (Malay)'), ('my', 'my (Burmese)'), ('nb-no', 'nb-NO (Norwegian (Bokmål))'), ('ne-np', 'ne-NP (Nepali)'), ('nl', 'nl (Dutch)'), ('nn-no', 'nn-NO (Norwegian (Nynorsk))'), ('nr', 'nr (Ndebele, South)'), ('nso', 'nso (Northern Sotho)'), ('oc', 'oc (Occitan (Lengadocian))'), ('or', 'or (Oriya)'), ('pa', 'pa (Punjabi)'), ('pa-in', 'pa-IN (Punjabi (India))'), ('pl', 'pl (Polish)'), ('pt-br', 'pt-BR (Portuguese (Brazilian))'), ('pt-pt', 'pt-PT (Portuguese (Portugal))'), ('rm', 'rm (Romansh)'), ('ro', 'ro (Romanian)'), ('ru', 'ru (Russian)'), ('rw', 'rw (Kinyarwanda)'), ('sa', 'sa (Sanskrit)'), ('sah', 'sah (Sakha)'), ('sat', 'sat (Santali)'), ('si', 'si (Sinhala)'), ('sk', 'sk (Slovak)'), ('sl', 'sl (Slovenian)'), ('son', 'son (Songhai)'), ('sq', 'sq (Albanian)'), ('sr', 'sr (Serbian)'), ('sr-cyrl', 'sr-Cyrl (Serbian)'), ('sr-latn', 'sr-Latn (Serbian)'), ('ss', 'ss (Siswati)'), ('st', 'st (Southern Sotho)'), ('sv-se', 'sv-SE (Swedish)'), ('sw', 'sw (Swahili)'), ('ta', 'ta (Tamil)'), ('ta-in', 'ta-IN (Tamil (India))'), ('ta-lk', 'ta-LK (Tamil (Sri Lanka))'), ('te', 'te (Telugu)'), ('th', 'th (Thai)'), ('tl', 'tl (Tagalog)'), ('tn', 'tn (Tswana)'), ('tr', 'tr (Turkish)'), ('ts', 'ts (Tsonga)'), ('tsz', 'tsz (Purépecha)'), ('tt-ru', 'tt-RU (Tatar)'), ('uk', 'uk (Ukrainian)'), ('ur', 'ur (Urdu)'), ('uz', 'uz (Uzbek)'), ('ve', 've (Venda)'), ('vi', 'vi (Vietnamese)'), ('wo', 'wo (Wolof)'), ('x-testing', 'x-testing (Testing)'), ('xh', 'xh (Xhosa)'), ('yo', 'yo (Yoruba)'), ('zh-cn', 'zh-CN (Chinese (Simplified))'), ('zh-tw', 'zh-TW (Chinese (Traditional))'), ('zu', 'zu (Zulu)')], default=b'en-us', max_length=32)),
                ('snippet', models.ForeignKey(on_delete='models.CASCADE', related_name='locale_set', to='base.Snippet')),
            ],
        ),
        migrations.CreateModel(
            name='TargetedLocale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=100)),
                ('priority', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-priority', 'name', 'code'),
            },
        ),
        migrations.AddField(
            model_name='jsonsnippet',
            name='locales',
            field=models.ManyToManyField(blank=True, to='base.TargetedLocale', verbose_name=b'Targeted Locales'),
        ),
        migrations.AddField(
            model_name='snippet',
            name='locales',
            field=models.ManyToManyField(blank=True, to='base.TargetedLocale', verbose_name=b'Targeted Locales'),
        ),
        migrations.RemoveField(
            model_name='snippetlocale',
            name='snippet',
        ),
        migrations.DeleteModel(
            name='JSONSnippetLocale',
        ),
        migrations.DeleteModel(
            name='SnippetLocale',
        ),
        migrations.AlterField(
            model_name='targetedcountry',
            name='code',
            field=models.CharField(max_length=16, unique=True, verbose_name=b'Geolocation Country'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='campaign',
            field=models.CharField(blank=True, default=b'', help_text=b'Optional campaign name. Will be added in the stats ping. Will be used for snippet blocking if set.', max_length=255),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_release',
            field=models.BooleanField(default=False, verbose_name=b'Release'),
        ),
        migrations.AddField(
            model_name='snippet',
            name='on_startpage_5',
            field=models.BooleanField(default=False, verbose_name=b'Activity Stream'),
        ),
        migrations.RemoveField(
            model_name='jsonsnippet',
            name='priority',
        ),
        migrations.RemoveField(
            model_name='snippet',
            name='priority',
        ),
        migrations.AddField(
            model_name='jsonsnippet',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='snippet',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='jsonsnippet',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
        ),
        migrations.AddField(
            model_name='snippettemplatevariable',
            name='order',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AlterModelOptions(
            name='snippettemplatevariable',
            options={'ordering': ('order', 'name')},
        ),
        migrations.AddField(
            model_name='jsonsnippet',
            name='on_esr',
            field=models.BooleanField(default=False, verbose_name=b'Enterprise'),
        ),
        migrations.AddField(
            model_name='snippet',
            name='on_esr',
            field=models.BooleanField(default=False, verbose_name=b'Enterprise'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_startpage_2',
            field=models.BooleanField(default=False, verbose_name=b'Version 2'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_startpage_3',
            field=models.BooleanField(default=False, verbose_name=b'Version 3'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_startpage_4',
            field=models.BooleanField(default=False, verbose_name=b'Version 4'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_startpage_5',
            field=models.BooleanField(default=True, verbose_name=b'Activity Stream'),
        ),
        migrations.AlterField(
            model_name='jsonsnippet',
            name='on_esr',
            field=models.BooleanField(default=False, verbose_name=b'ESR'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_esr',
            field=models.BooleanField(default=False, verbose_name=b'ESR'),
        ),
        migrations.AddField(
            model_name='jsonsnippet',
            name='published',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='snippet',
            name='published',
            field=models.BooleanField(default=False),
        ),
        migrations.RemoveField(
            model_name='jsonsnippet',
            name='disabled',
        ),
        migrations.RemoveField(
            model_name='snippet',
            name='disabled',
        ),
        migrations.AddField(
            model_name='snippet',
            name='on_startpage_6',
            field=models.BooleanField(default=False, verbose_name=b'Activity Stream NG'),
        ),
        migrations.AddField(
            model_name='snippettemplate',
            name='code_name',
            field=models.CharField(default='', max_length=255),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='snippettemplate',
            name='version',
            field=models.CharField(default='1.0.0', max_length=10),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='SnippetNG',
            fields=[
            ],
            options={
                'verbose_name': 'Snippet NG',
                'proxy': True,
                'verbose_name_plural': 'Snippets NG',
                'indexes': [],
            },
            bases=('base.snippet',),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_startpage_5',
            field=models.BooleanField(default=False, verbose_name=b'Activity Stream'),
        ),
        migrations.AlterField(
            model_name='snippettemplate',
            name='code_name',
            field=models.CharField(max_length=255, unique=True),
        ),
        migrations.AddField(
            model_name='snippettemplate',
            name='startpage',
            field=models.SmallIntegerField(default=4),
        ),
        migrations.AlterModelOptions(
            name='snippet',
            options={'ordering': ('-modified',), 'permissions': (('can_publish_on_release', 'Can publish snippets on Release'), ('can_publish_on_beta', 'Can publish snippets on Beta'), ('can_publish_on_aurora', 'Can publish snippets on Aurora'), ('can_publish_on_nightly', 'Can publish snippets on Nightly'), ('can_publish_on_esr', 'Can publish snippets on ESR'))},
        ),
        migrations.AlterField(
            model_name='jsonsnippet',
            name='client_match_rules',
            field=models.ManyToManyField(blank=True, to='base.ClientMatchRule', verbose_name='Client Match Rules'),
        ),
        migrations.AlterField(
            model_name='jsonsnippet',
            name='countries',
            field=models.ManyToManyField(blank=True, to='base.TargetedCountry', verbose_name='Targeted Countries'),
        ),
        migrations.AlterField(
            model_name='jsonsnippet',
            name='icon',
            field=models.TextField(help_text='Icon should be a 96x96px PNG.'),
        ),
        migrations.AlterField(
            model_name='jsonsnippet',
            name='locales',
            field=models.ManyToManyField(blank=True, to='base.TargetedLocale', verbose_name='Targeted Locales'),
        ),
        migrations.AlterField(
            model_name='jsonsnippet',
            name='on_aurora',
            field=models.BooleanField(default=False, verbose_name='Aurora'),
        ),
        migrations.AlterField(
            model_name='jsonsnippet',
            name='on_beta',
            field=models.BooleanField(default=False, verbose_name='Beta'),
        ),
        migrations.AlterField(
            model_name='jsonsnippet',
            name='on_esr',
            field=models.BooleanField(default=False, verbose_name='ESR'),
        ),
        migrations.AlterField(
            model_name='jsonsnippet',
            name='on_nightly',
            field=models.BooleanField(default=False, verbose_name='Nightly'),
        ),
        migrations.AlterField(
            model_name='jsonsnippet',
            name='on_release',
            field=models.BooleanField(default=True, verbose_name='Release'),
        ),
        migrations.AlterField(
            model_name='jsonsnippet',
            name='on_startpage_1',
            field=models.BooleanField(default=True, verbose_name='Version 1'),
        ),
        migrations.AlterField(
            model_name='jsonsnippet',
            name='text',
            field=models.CharField(help_text='Maximum length 140 characters.', max_length=140),
        ),
        migrations.AlterField(
            model_name='jsonsnippet',
            name='weight',
            field=models.IntegerField(choices=[(33, 'Appear 1/3rd as often as an average snippet'), (50, 'Appear half as often as an average snippet'), (66, 'Appear 2/3rds as often as an average snippet'), (100, 'Appear as often as an average snippet'), (150, 'Appear 1.5 times as often as an average snippet'), (200, 'Appear twice as often as an average snippet'), (300, 'Appear three times as often as an average snippet')], default=100, help_text='How often should this snippet be shown to users?', verbose_name='Prevalence'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='campaign',
            field=models.CharField(blank=True, default='', help_text='Optional campaign name. Will be added in the stats ping. Will be used for snippet blocking if set.', max_length=255),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='client_match_rules',
            field=models.ManyToManyField(blank=True, to='base.ClientMatchRule', verbose_name='Client Match Rules'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='countries',
            field=models.ManyToManyField(blank=True, to='base.TargetedCountry', verbose_name='Targeted Countries'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='data',
            field=models.TextField(default='{}'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='exclude_from_search_providers',
            field=models.ManyToManyField(blank=True, to='base.SearchProvider', verbose_name='Excluded Search Providers'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='locales',
            field=models.ManyToManyField(blank=True, to='base.TargetedLocale', verbose_name='Targeted Locales'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_aurora',
            field=models.BooleanField(default=False, verbose_name='Aurora'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_beta',
            field=models.BooleanField(default=False, verbose_name='Beta'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_esr',
            field=models.BooleanField(default=False, verbose_name='ESR'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_nightly',
            field=models.BooleanField(default=False, verbose_name='Nightly'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_release',
            field=models.BooleanField(default=False, verbose_name='Release'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_startpage_1',
            field=models.BooleanField(default=False, verbose_name='Version 1'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_startpage_2',
            field=models.BooleanField(default=False, verbose_name='Version 2'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_startpage_3',
            field=models.BooleanField(default=False, verbose_name='Version 3'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_startpage_4',
            field=models.BooleanField(default=False, verbose_name='Version 4'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_startpage_5',
            field=models.BooleanField(default=False, verbose_name='Activity Stream'),
        ),
        migrations.RemoveField(
            model_name='snippet',
            name='on_startpage_6',
        ),
        migrations.AlterField(
            model_name='snippet',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.SnippetTemplate'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='weight',
            field=models.IntegerField(choices=[(33, 'Appear 1/3rd as often as an average snippet'), (50, 'Appear half as often as an average snippet'), (66, 'Appear 2/3rds as often as an average snippet'), (100, 'Appear as often as an average snippet'), (150, 'Appear 1.5 times as often as an average snippet'), (200, 'Appear twice as often as an average snippet'), (300, 'Appear three times as often as an average snippet')], default=100, help_text='How often should this snippet be shown to users?', verbose_name='Prevalence'),
        ),
        migrations.AlterField(
            model_name='snippettemplate',
            name='hidden',
            field=models.BooleanField(default=False, help_text='Hide from template selection dropdown'),
        ),
        migrations.AlterField(
            model_name='snippettemplate',
            name='priority',
            field=models.BooleanField(default=False, help_text='Set to true to display first in dropdowns for faster selections', verbose_name='Priority template'),
        ),
        migrations.AlterField(
            model_name='snippettemplatevariable',
            name='description',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterField(
            model_name='snippettemplatevariable',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variable_set', to='base.SnippetTemplate'),
        ),
        migrations.AlterField(
            model_name='snippettemplatevariable',
            name='type',
            field=models.IntegerField(choices=[(4, 'Main Text'), (0, 'Text'), (2, 'Small Text'), (1, 'Image'), (3, 'Checkbox')], default=0),
        ),
        migrations.AlterField(
            model_name='targetedcountry',
            name='code',
            field=models.CharField(max_length=16, unique=True, verbose_name='Geolocation Country'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_aurora',
            field=models.BooleanField(default=False, verbose_name='Dev Edition (old Aurora)'),
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('on_release', models.BooleanField(db_index=True, default=False, verbose_name='Release')),
                ('on_beta', models.BooleanField(db_index=True, default=False, verbose_name='Beta')),
                ('on_aurora', models.BooleanField(db_index=True, default=False, verbose_name='Dev Edition (old Aurora)')),
                ('on_nightly', models.BooleanField(db_index=True, default=False, verbose_name='Nightly')),
                ('on_esr', models.BooleanField(db_index=True, default=False, verbose_name='ESR')),
                ('on_startpage_6', models.BooleanField(db_index=True, default=True, verbose_name='Activity Stream Router')),
                ('jexl_expr', models.TextField(blank=True, default='')),
                ('client_match_rules', models.ManyToManyField(blank=True, to='base.ClientMatchRule', verbose_name='Client Match Rules')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField(blank=True, default='', help_text='Optional campaign slug. Will be added in the stats ping. Will be used for snippet blocking if set.', max_length=255, unique=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AlterField(
            model_name='snippettemplatevariable',
            name='type',
            field=models.IntegerField(choices=[(4, 'Main Text'), (5, 'Rich Text'), (0, 'Text'), (2, 'Small Text'), (1, 'Image'), (3, 'Checkbox')], default=0),
        ),
        migrations.CreateModel(
            name='Addon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('url', models.URLField(unique=True)),
                ('guid', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.AddField(
            model_name='snippet',
            name='ready_for_review',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='ASRSnippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('data', models.TextField(default='{}')),
                ('status', models.IntegerField(choices=[(100, 'Draft'), (200, 'Ready for review'), (300, 'Approved'), (400, 'Published')], db_index=True, default=100)),
                ('campaign', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Campaign')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.SnippetTemplate')),
                ('publish_end', models.DateTimeField(blank=True, help_text='See the current time in <a href="http://time.is/UTC">UTC</a>', null=True, verbose_name='Publish Ends')),
                ('publish_start', models.DateTimeField(blank=True, help_text='See the current time in <a href="http://time.is/UTC">UTC</a>', null=True, verbose_name='Publish Starts')),
                ('target', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Target')),
                ('weight', models.IntegerField(choices=[(33, 'Appear 1/3rd as often as an average snippet'), (50, 'Appear half as often as an average snippet'), (66, 'Appear 2/3rds as often as an average snippet'), (100, 'Appear as often as an average snippet'), (150, 'Appear 1.5 times as often as an average snippet'), (200, 'Appear twice as often as an average snippet'), (300, 'Appear three times as often as an average snippet')], default=100, help_text='How often should this snippet be shown to users?')),
                ('locales', models.ManyToManyField(blank=True, to='base.TargetedLocale', verbose_name='Targeted Locales')),
            ],
            options={
                'verbose_name': 'ASR Snippet',
                'verbose_name_plural': 'ASR Snippets',
                'ordering': ['-modified'],
            },
        ),
        migrations.DeleteModel(
            name='SnippetNG',
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_aurora',
            field=models.BooleanField(db_index=True, default=False, verbose_name='Dev Edition (old Aurora)'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_beta',
            field=models.BooleanField(db_index=True, default=False, verbose_name='Beta'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_esr',
            field=models.BooleanField(db_index=True, default=False, verbose_name='ESR'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_nightly',
            field=models.BooleanField(db_index=True, default=False, verbose_name='Nightly'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_release',
            field=models.BooleanField(db_index=True, default=False, verbose_name='Release'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_startpage_4',
            field=models.BooleanField(db_index=True, default=False, verbose_name='Version 4'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='on_startpage_5',
            field=models.BooleanField(db_index=True, default=False, verbose_name='Activity Stream'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='published',
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AddField(
            model_name='snippet',
            name='creator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='asrsnippet',
            name='for_qa',
            field=models.BooleanField(blank=True, default=False, help_text='Snippet used in QA Testing. Do not remove or unpublish.', verbose_name='For QA'),
        ),
        migrations.AlterField(
            model_name='asrsnippet',
            name='publish_end',
            field=models.DateTimeField(blank=True, help_text='See the current time in <a target="_blank" href="http://time.is/UTC">UTC</a>', null=True, verbose_name='Publish Ends'),
        ),
        migrations.AlterField(
            model_name='asrsnippet',
            name='publish_start',
            field=models.DateTimeField(blank=True, help_text='See the current time in <a target="_blank" href="http://time.is/UTC">UTC</a>', null=True, verbose_name='Publish Starts'),
        ),
        migrations.AddField(
            model_name='snippet',
            name='migrated_to',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='migrated_from', to='base.ASRSnippet'),
        ),
        migrations.AddField(
            model_name='asrsnippet',
            name='targets',
            field=models.ManyToManyField(blank=True, default=None, to='base.Target'),
        ),
        migrations.AlterField(
            model_name='asrsnippet',
            name='target',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='trgt', to='base.Target'),
        ),
        migrations.RemoveField(
            model_name='asrsnippet',
            name='target',
        ),
        migrations.AlterModelOptions(
            name='asrsnippet',
            options={'ordering': ['-modified'], 'permissions': (('publish_on_release', 'Publish snippets on Release'), ('publish_on_beta', 'Publish snippets on Beta'), ('publish_on_aurora', 'Publish snippets on Aurora'), ('publish_on_nightly', 'Publish snippets on Nightly'), ('publish_on_esr', 'Publish snippets on ESR')), 'verbose_name': 'ASR Snippet', 'verbose_name_plural': 'ASR Snippets'},
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField()),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'categories',
                'ordering': ('name',),
            },
        ),
        migrations.RemoveField(
            model_name='snippet',
            name='migrated_to',
        ),
        migrations.AddField(
            model_name='asrsnippet',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='asrsnippets', to='base.Category'),
        ),
        migrations.AlterField(
            model_name='campaign',
            name='slug',
            field=models.SlugField(help_text='Optional campaign slug. Will be added in the stats ping. Will be used for snippet blocking if set.', max_length=255, unique=True),
        ),
        migrations.CreateModel(
            name='Icon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('height', models.PositiveIntegerField(default=0)),
                ('width', models.PositiveIntegerField(default=0)),
                ('image', models.ImageField(height_field='height', help_text='PNGs only. Note that updating the image will update all snippets using this image.', upload_to=snippets.base.models._generate_filename, width_field='width')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('snippet', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='template_ng', to='base.ASRSnippet')),
            ],
        ),
        migrations.CreateModel(
            name='SendToDeviceTemplate',
            fields=[
                ('template_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.Template')),
                ('scene1_title', models.CharField(blank=True, help_text='Snippet title displayed before snippet text.', max_length=255)),
                ('scene1_text', models.TextField(help_text='Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br.')),
                ('scene1_button_label', models.CharField(default='Learn more', help_text='Label for the button on Scene 1 that leads to Scene 2.', max_length=50)),
                ('scene1_button_color', models.CharField(blank=True, help_text='The text color of the button. Valid CSS color. Defaults to Firefox Theme Color.', max_length=20)),
                ('scene1_button_background_color', models.CharField(blank=True, help_text='The background color of the button. Valid CSS color. Defaults to Firefox Theme Color.', max_length=20)),
                ('scene2_title', models.CharField(blank=True, help_text='Title displayed before text in scene 2.', max_length=255)),
                ('scene2_text', models.TextField(help_text='Scene 2 main text. HTML subset allowed: i, b, u, strong, em, br.')),
                ('scene2_button_label', models.CharField(default='Send', help_text='Label for form submit button.', max_length=50)),
                ('scene2_input_placeholder', models.CharField(default='Your email here', help_text='Placeholder text for email / phone number field.', max_length=255)),
                ('scene2_dismiss_button_text', models.CharField(default='Dismiss', help_text='Label for the dismiss button on Scene 2.', max_length=50)),
                ('scene2_disclaimer_html', models.TextField(help_text='Text and link underneath the input box.')),
                ('locale', models.CharField(default='en-US', help_text='Two to five character string for the locale code. Default "en-US".', max_length=10)),
                ('country', models.CharField(default='us', help_text='Two character string for the country code (used for SMS). Default "us".', max_length=10)),
                ('include_sms', models.BooleanField(blank=True, default=False, help_text='Defines whether SMS is available.')),
                ('message_id_sms', models.CharField(blank=True, help_text='Newsletter/basket id representing the SMS message to be sent.', max_length=100)),
                ('message_id_email', models.CharField(help_text='Newsletter/basket id representing the email message to be sent. Must be a value from the "Slug" column here: https://basket.mozilla.org/news/.', max_length=100)),
                ('success_title', models.TextField(help_text='Title of success message after form submission.')),
                ('success_text', models.TextField(help_text='Text of success message after form submission.')),
                ('error_text', models.TextField(help_text='Text of error message if form submission fails.')),
                ('block_button_text', models.CharField(default='Remove this', help_text='Tooltip text used for dismiss button.', max_length=50)),
                ('do_not_autoblock', models.BooleanField(blank=True, default=False, help_text='Used to prevent blocking the snippet after the CTA (link or button) has been clicked.')),
                ('scene1_icon', models.ForeignKey(help_text='Snippet icon. 192x192 PNG.', on_delete=django.db.models.deletion.PROTECT, related_name='sendtodevice_scene1_icons', to='base.Icon')),
                ('scene1_title_icon', models.ForeignKey(blank=True, help_text='Small icon that shows up before the title / text. 64x64px.PNG. Grayscale.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sendtodevice_scene1_title_icons', to='base.Icon')),
                ('scene2_icon', models.ForeignKey(help_text='Image to display above the form. 192x192px PNG.', on_delete=django.db.models.deletion.PROTECT, related_name='sendtodevice_scene2_icons', to='base.Icon')),
            ],
            bases=('base.template',),
        ),
        migrations.RemoveField(
            model_name='asrsnippet',
            name='template',
        ),
        migrations.AlterField(
            model_name='template',
            name='snippet',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='template_relation', to='base.ASRSnippet'),
        ),
        migrations.CreateModel(
            name='FundraisingTemplate',
            fields=[
                ('template_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.Template')),
                ('donation_form_url', models.URLField(default='https://donate.mozilla.org/?utm_source=desktop-snippet&utm_medium=snippet', max_length=500)),
                ('currency_code', models.CharField(default='usd', max_length=10)),
                ('locale', models.CharField(default='en-US', max_length=10)),
                ('title', models.CharField(blank=True, help_text='Snippet title displayed before snippet text.', max_length=255)),
                ('text', models.TextField()),
                ('text_color', models.CharField(blank=True, max_length=10)),
                ('background_color', models.CharField(blank=True, max_length=10)),
                ('highlight_color', models.CharField(blank=True, default='#FFE900', help_text='Paragraph em highlight color.', max_length=10)),
                ('donation_amount_first', models.PositiveSmallIntegerField(verbose_name='First')),
                ('donation_amount_second', models.PositiveSmallIntegerField(verbose_name='Second')),
                ('donation_amount_third', models.PositiveSmallIntegerField(verbose_name='Third')),
                ('donation_amount_fourth', models.PositiveSmallIntegerField(verbose_name='Fourth')),
                ('selected_button', models.CharField(choices=[('donation_amount_first', 'First'), ('donation_amount_second', 'Second'), ('donation_amount_third', 'Third'), ('donation_amount_fourth', 'Fourth')], default='donation_amount_second', help_text="Donation amount button that's selected by default.", max_length=25)),
                ('button_label', models.CharField(help_text='Text for a button next to main snippet text that links to button_url. Requires button_url.', max_length=50)),
                ('button_color', models.CharField(blank=True, help_text='defaults to firefox theme', max_length=20)),
                ('button_background_color', models.CharField(blank=True, help_text='defaults to firefox theme', max_length=20)),
                ('monthly_checkbox_label_text', models.CharField(default='Make my donation monthly', max_length=255)),
                ('test', models.CharField(blank=True, choices=[('', 'Default'), ('bold', 'Bold'), ('takeover', 'Takeover')], help_text='Different styles for the snippet.', max_length=10)),
                ('block_button_text', models.CharField(default='Remove this', help_text='Tooltip text used for dismiss button.', max_length=50)),
                ('do_not_autoblock', models.BooleanField(blank=True, default=False, help_text='Used to prevent blocking the snippet after the CTA (link or button) has been clicked.')),
                ('icon', models.ForeignKey(help_text='Snippet icon. 192x192px PNG.', on_delete=django.db.models.deletion.PROTECT, related_name='fundraising_icons', to='base.Icon')),
                ('title_icon', models.ForeignKey(blank=True, help_text='Small icon that shows up before the title / text. 64x64px.PNG. Grayscale.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fundraising_title_icons', to='base.Icon')),
            ],
            bases=('base.template',),
        ),
        migrations.CreateModel(
            name='FxASignupTemplate',
            fields=[
                ('template_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.Template')),
                ('scene1_title', models.CharField(blank=True, help_text='Snippet title displayed before snippet text.', max_length=255)),
                ('scene1_text', models.TextField(help_text='Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br.')),
                ('scene1_button_label', models.CharField(default='Learn more', help_text='Label for the button on Scene 1 that leads to Scene 2.', max_length=50)),
                ('scene1_button_color', models.CharField(blank=True, help_text='The text color of the button. Valid CSS color. Defaults to Firefox Theme Color.', max_length=20)),
                ('scene1_button_background_color', models.CharField(blank=True, help_text='The background color of the button. Valid CSS color. Defaults to Firefox Theme Color.', max_length=20)),
                ('scene2_title', models.CharField(blank=True, help_text='Title displayed before text in scene 2.', max_length=255)),
                ('scene2_text', models.TextField(help_text='Scene 2 main text. HTML subset allowed: i, b, u, strong, em, br.')),
                ('scene2_button_label', models.CharField(default='Sign me up', help_text='Label for form submit button.', max_length=50)),
                ('scene2_email_placeholder_text', models.CharField(default='Your email here', help_text='Value to show while input is empty.', max_length=255)),
                ('scene2_dismiss_button_text', models.CharField(default='Dismiss', help_text='Label for the dismiss button on Scene 2.', max_length=50)),
                ('utm_term', models.CharField(blank=True, help_text='Value to pass through to GA as utm_term.', max_length=100)),
                ('utm_campaign', models.CharField(blank=True, help_text='Value to pass through to GA as utm_campaign.', max_length=100)),
                ('block_button_text', models.CharField(default='Remove this', help_text='Tooltip text used for dismiss button.', max_length=50)),
                ('do_not_autoblock', models.BooleanField(blank=True, default=False, help_text='Used to prevent blocking the snippet after the CTA (link or button) has been clicked.')),
                ('scene1_icon', models.ForeignKey(help_text='Snippet icon. 192x192px PNG.', on_delete=django.db.models.deletion.PROTECT, related_name='fxasignup_scene1_icons', to='base.Icon')),
                ('scene1_title_icon', models.ForeignKey(blank=True, help_text='Small icon that shows up before the title / text. 64x64px.PNG. Grayscale.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fxasignup_scene1_title_icons', to='base.Icon')),
            ],
            bases=('base.template',),
        ),
        migrations.CreateModel(
            name='NewsletterTemplate',
            fields=[
                ('template_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.Template')),
                ('scene1_title', models.CharField(blank=True, help_text='Snippet title displayed before snippet text.', max_length=255)),
                ('scene1_text', models.TextField(help_text='Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br.')),
                ('scene1_button_label', models.CharField(default='Learn more', help_text='Label for the button on Scene 1 that leads to Scene 2.', max_length=50)),
                ('scene1_button_color', models.CharField(blank=True, help_text='The text color of the button. Valid CSS color. Defaults to Firefox Theme Color.', max_length=20)),
                ('scene1_button_background_color', models.CharField(blank=True, help_text='The background color of the button. Valid CSS color. Defaults to Firefox Theme Color.', max_length=20)),
                ('scene2_title', models.CharField(blank=True, help_text='Title displayed before text in scene 2.', max_length=255)),
                ('scene2_text', models.TextField(help_text='Scene 2 main text. HTML subset allowed: i, b, u, strong, em, br.')),
                ('scene2_button_label', models.CharField(default='Sign me up', help_text='Label for form submit button.', max_length=50)),
                ('scene2_email_placeholder_text', models.CharField(default='Your email here', help_text='Value to show while input is empty.', max_length=255)),
                ('scene2_dismiss_button_text', models.CharField(default='Dismiss', help_text='Label for the dismiss button on Scene 2.', max_length=50)),
                ('scene2_newsletter', models.CharField(default='mozilla-foundation', help_text='Newsletter/basket id user is subscribing to. Must be a value from the "Slug" column here: https://basket.mozilla.org/news/.', max_length=50)),
                ('scene2_privacy_html', models.TextField(help_text='Text and link next to the privacy checkbox. Must link to a privacy policy.')),
                ('locale', models.CharField(default='en-US', help_text='String for the newsletter locale code.', max_length=10)),
                ('success_text', models.TextField(help_text='Text of success message after form submission.')),
                ('error_text', models.TextField(help_text='Text of error message if form submission fails.')),
                ('block_button_text', models.CharField(default='Remove this', help_text='Tooltip text used for dismiss button.', max_length=50)),
                ('do_not_autoblock', models.BooleanField(blank=True, default=False, help_text='Used to prevent blocking the snippet after the CTA (link or button) has been clicked.')),
                ('scene1_icon', models.ForeignKey(help_text='Snippet icon. 192x192px PNG.', on_delete=django.db.models.deletion.PROTECT, related_name='newsletter_scene1_icons', to='base.Icon')),
                ('scene1_title_icon', models.ForeignKey(blank=True, help_text='Small icon that shows up before the title / text. 64x64px.PNG. Grayscale.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='newsletter_scene1_title_icons', to='base.Icon')),
            ],
            bases=('base.template',),
        ),
        migrations.CreateModel(
            name='SimpleTemplate',
            fields=[
                ('template_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.Template')),
                ('title', models.CharField(blank=True, help_text='Snippet title displayed before snippet text.', max_length=255)),
                ('text', models.TextField(help_text='Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br')),
                ('button_label', models.CharField(blank=True, help_text='Text for a button next to main snippet text that links to button_url. Requires button_url.', max_length=50)),
                ('button_color', models.CharField(blank=True, help_text='The text color of the button. Valid CSS color.', max_length=20)),
                ('button_url', models.URLField(blank=True, help_text='A url, button_label links to this', max_length=500, validators=[django.core.validators.URLValidator(schemes=['https'])])),
                ('section_title_text', models.CharField(blank=True, help_text='Section title text. section_title_icon must also be specified to display.', max_length=255)),
                ('section_title_url', models.URLField(blank=True, help_text='A url, section_title_text links to this', validators=[django.core.validators.URLValidator(schemes=['https'])])),
                ('tall', models.BooleanField(blank=True, default=False, help_text='To be used by fundraising only, increases height to roughly 120px. Defaults to false.')),
                ('block_button_text', models.CharField(default='Remove this', help_text='Tooltip text used for dismiss button.', max_length=50)),
                ('do_not_autoblock', models.BooleanField(blank=True, default=False, help_text='Used to prevent blocking the snippet after the CTA (link or button) has been clicked.')),
                ('icon', models.ForeignKey(help_text='Snippet icon. 192x192px PNG.', on_delete=django.db.models.deletion.PROTECT, related_name='simple_icons', to='base.Icon')),
                ('section_title_icon', models.ForeignKey(blank=True, help_text='Section title icon. 32x32px. PNG. section_title_text must also be specified to display.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='simple_section_icons', to='base.Icon')),
                ('title_icon', models.ForeignKey(blank=True, help_text='Small icon that shows up before the title / text. 64x64px.PNG. Grayscale.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='simple_title_icons', to='base.Icon')),
                ('button_background_color', models.CharField(blank=True, help_text='The text color of the button. Valid CSS color.', max_length=20)),
            ],
            bases=('base.template',),
        ),
        migrations.DeleteModel(
            name='UploadedFile',
        ),
        migrations.RemoveField(
            model_name='asrsnippet',
            name='data',
        ),
        migrations.DeleteModel(
            name='JSONSnippet',
        ),
        migrations.CreateModel(
            name='SimpleBelowSearchTemplate',
            fields=[
                ('template_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.Template')),
                ('text', models.TextField(help_text='Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br')),
                ('block_button_text', models.CharField(default='Remove this', help_text='Tooltip text used for dismiss button.', max_length=50)),
                ('do_not_autoblock', models.BooleanField(blank=True, default=False, help_text='Used to prevent blocking the snippet after the CTA (link or button) has been clicked.')),
                ('icon', models.ForeignKey(help_text='Snippet icon. 192x192px PNG.', on_delete=django.db.models.deletion.PROTECT, related_name='simple_below_search_icons', to='base.Icon')),
            ],
            bases=('base.template',),
        ),
        migrations.AddField(
            model_name='snippet',
            name='client_option_addon_check_type',
            field=models.CharField(default='any', max_length=20),
        ),
        migrations.AddField(
            model_name='snippet',
            name='client_option_addon_name',
            field=models.CharField(blank=True, default='', max_length=100),
        ),
        migrations.AddField(
            model_name='snippet',
            name='client_option_bookmarks_count_lower_bound',
            field=models.IntegerField(default=-1),
        ),
        migrations.AddField(
            model_name='snippet',
            name='client_option_bookmarks_count_upper_bound',
            field=models.IntegerField(default=-1),
        ),
        migrations.AddField(
            model_name='snippet',
            name='client_option_has_fxaccount',
            field=models.CharField(default='any', max_length=10),
        ),
        migrations.AddField(
            model_name='snippet',
            name='client_option_is_default_browser',
            field=models.CharField(default='any', max_length=10),
        ),
        migrations.AddField(
            model_name='snippet',
            name='client_option_is_developer',
            field=models.CharField(default='any', max_length=10),
        ),
        migrations.AddField(
            model_name='snippet',
            name='client_option_profileage_lower_bound',
            field=models.IntegerField(default=-1),
        ),
        migrations.AddField(
            model_name='snippet',
            name='client_option_profileage_upper_bound',
            field=models.IntegerField(default=-1),
        ),
        migrations.AddField(
            model_name='snippet',
            name='client_option_screen_resolutions',
            field=models.CharField(default='0-1024;1024-1920;1920-50000', max_length=150),
        ),
        migrations.AddField(
            model_name='snippet',
            name='client_option_sessionage_lower_bound',
            field=models.IntegerField(default=-1),
        ),
        migrations.AddField(
            model_name='snippet',
            name='client_option_sessionage_upper_bound',
            field=models.IntegerField(default=-1),
        ),
        migrations.AddField(
            model_name='snippet',
            name='client_option_version_lower_bound',
            field=models.CharField(default='any', max_length=20),
        ),
        migrations.AddField(
            model_name='snippet',
            name='client_option_version_upper_bound',
            field=models.CharField(default='any', max_length=20),
        ),
        migrations.AddField(
            model_name='target',
            name='filtr_browser_addon',
            field=models.CharField(blank=True, default='', max_length=250),
        ),
        migrations.AddField(
            model_name='target',
            name='filtr_country',
            field=models.CharField(blank=True, default='', max_length=1250),
        ),
        migrations.AddField(
            model_name='target',
            name='filtr_current_search_engine',
            field=models.CharField(blank=True, default='', max_length=250),
        ),
        migrations.AddField(
            model_name='target',
            name='filtr_firefox_version',
            field=models.CharField(blank=True, default='', max_length=10),
        ),
        migrations.AddField(
            model_name='target',
            name='filtr_is_default_browser',
            field=models.CharField(blank=True, default='', max_length=10),
        ),
        migrations.AddField(
            model_name='target',
            name='filtr_is_developer',
            field=models.CharField(blank=True, default='', max_length=250),
        ),
        migrations.AddField(
            model_name='target',
            name='filtr_previous_session_end',
            field=models.CharField(blank=True, default='', max_length=250),
        ),
        migrations.AddField(
            model_name='target',
            name='filtr_profile_age_created',
            field=models.CharField(blank=True, default='', max_length=250),
        ),
        migrations.AddField(
            model_name='target',
            name='filtr_total_bookmarks_count',
            field=models.CharField(blank=True, default='', max_length=250),
        ),
        migrations.AddField(
            model_name='target',
            name='filtr_updates_autodownload_enabled',
            field=models.CharField(blank=True, default='', max_length=10),
        ),
        migrations.AddField(
            model_name='target',
            name='filtr_updates_enabled',
            field=models.CharField(blank=True, default='', max_length=10),
        ),
        migrations.AddField(
            model_name='target',
            name='filtr_uses_firefox_sync',
            field=models.CharField(blank=True, default='', max_length=10),
        ),
        migrations.AlterField(
            model_name='asrsnippet',
            name='weight',
            field=models.IntegerField(choices=[(2, 'Appear 1/50th as often as an average snippet'), (5, 'Appear 1/20th as often as an average snippet'), (10, 'Appear 1/10th as often as an average snippet'), (33, 'Appear 1/3rd as often as an average snippet'), (50, 'Appear half as often as an average snippet'), (66, 'Appear 2/3rds as often as an average snippet'), (100, 'Appear as often as an average snippet'), (150, 'Appear 1.5 times as often as an average snippet'), (200, 'Appear twice as often as an average snippet'), (300, 'Appear three times as often as an average snippet')], default=100, help_text='How often should this snippet be shown to users?'),
        ),
        migrations.AlterField(
            model_name='fundraisingtemplate',
            name='donation_form_url',
            field=models.URLField(default='https://donate.mozilla.org/?utm_source=desktop-snippet&utm_medium=snippet', max_length=500, validators=[django.core.validators.URLValidator(schemes=['https'])]),
        ),
        migrations.AlterField(
            model_name='icon',
            name='image',
            field=models.ImageField(height_field='height', help_text='PNG only. Note that updating the image will update all snippets using this image.', upload_to=snippets.base.models._generate_filename, width_field='width'),
        ),
        migrations.AlterField(
            model_name='snippet',
            name='weight',
            field=models.IntegerField(choices=[(2, 'Appear 1/50th as often as an average snippet'), (5, 'Appear 1/20th as often as an average snippet'), (10, 'Appear 1/10th as often as an average snippet'), (33, 'Appear 1/3rd as often as an average snippet'), (50, 'Appear half as often as an average snippet'), (66, 'Appear 2/3rds as often as an average snippet'), (100, 'Appear as often as an average snippet'), (150, 'Appear 1.5 times as often as an average snippet'), (200, 'Appear twice as often as an average snippet'), (300, 'Appear three times as often as an average snippet')], default=100, help_text='How often should this snippet be shown to users?', verbose_name='Prevalence'),
        ),
        migrations.AddField(
            model_name='target',
            name='filtr_desktop_devices_count',
            field=models.CharField(blank=True, default='', max_length=250),
        ),
        migrations.AddField(
            model_name='target',
            name='filtr_mobile_devices_count',
            field=models.CharField(blank=True, default='', max_length=250),
        ),
        migrations.AddField(
            model_name='target',
            name='filtr_total_devices_count',
            field=models.CharField(blank=True, default='', max_length=250),
        ),
        migrations.AlterField(
            model_name='fundraisingtemplate',
            name='text',
            field=models.TextField(help_text='Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br'),
        ),
        migrations.AlterField(
            model_name='asrsnippet',
            name='campaign',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='snippets', to='base.Campaign'),
        ),
        migrations.AlterField(
            model_name='asrsnippet',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='snippets', to='base.Category'),
        ),
        migrations.AlterField(
            model_name='asrsnippet',
            name='targets',
            field=models.ManyToManyField(blank=True, default=None, related_name='snippets', to='base.Target'),
        ),
        migrations.AlterField(
            model_name='campaign',
            name='slug',
            field=models.SlugField(help_text='Campaign slug. Will be added in the stats ping. Will be used for snippet blocking if set.', max_length=255, unique=True),
        ),
        migrations.AlterField(
            model_name='sendtodevicetemplate',
            name='locale',
            field=models.CharField(default='EN', help_text='Two to five character string for the locale code. Default "EN".', max_length=10),
        ),
        migrations.CreateModel(
            name='Locale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(help_text='Comma separated list of locales with or without territory information. E.g `en-us` and `es-mx,es-ar`', max_length=255, unique=True, validators=[django.core.validators.RegexValidator(regex='^,?([A-Za-z-]+,?)+$')])),
                ('translations', models.TextField(blank=True, default='{}', help_text='JSON dictionary with Template fields as keys and localized strings as values.', validators=[snippets.base.validators.validate_json_data])),
            ],
            options={
                'ordering': ('name', 'code'),
            },
        ),
        migrations.AddField(
            model_name='asrsnippet',
            name='locale',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Locale'),
        ),
        migrations.AlterField(
            model_name='icon',
            name='image',
            field=models.ImageField(height_field='height', help_text='PNG only. A reasonable file size is about 5 KiB. Note that updating the image will update all snippets using this image.', upload_to=snippets.base.models._generate_filename, width_field='width'),
        ),
        migrations.RemoveField(
            model_name='asrsnippet',
            name='locales',
        ),
        migrations.AddField(
            model_name='asrsnippet',
            name='tags',
            field=taggit_selectize.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
