# Generated by Django 2.2.13 on 2020-11-10 13:33

from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import snippets.base.fields
import snippets.base.models
import snippets.base.validators
import taggit_selectize.managers
import uuid


class Migration(migrations.Migration):

    replaces = [('base', '0001_squashed_0097_asrsnippet_tags'), ('base', '0002_auto_20190718_1103'), ('base', '0003_remove_asrsnippet_for_qa'), ('base', '0004_auto_20190731_0924'), ('base', '0005_auto_20190731_1023'), ('base', '0006_auto_20190801_1123'), ('base', '0007_auto_20190830_1018'), ('base', '0008_job_distributions'), ('base', '0009_auto_20190905_0832'), ('base', '0010_auto_20190905_1551'), ('base', '0011_auto_20190909_1027'), ('base', '0012_auto_20190911_0947'), ('base', '0013_auto_20190916_0952'), ('base', '0014_auto_20190916_1930'), ('base', '0015_target_filtr_total_addons'), ('base', '0016_target_filtr_can_install_addons'), ('base', '0017_auto_20191008_1211'), ('base', '0018_target_filtr_firefox_service'), ('base', '0019_target_filtr_operating_system'), ('base', '0020_auto_20191021_1115'), ('base', '0021_auto_20191021_1327'), ('base', '0022_job_completed_on'), ('base', '0023_dailyjobmetrics'), ('base', '0024_auto_20191119_1424'), ('base', '0025_dailychannelmetrics_dailycountrymetrics_dailysnippetsmetrics'), ('base', '0026_auto_20191211_0815'), ('base', '0027_auto_20191213_1028'), ('base', '0028_target_filtr_needs_update'), ('base', '0029_locale_rtl'), ('base', '0030_auto_20200219_0909'), ('base', '0031_auto_20200219_0949'), ('base', '0032_auto_20200221_1312'), ('base', '0033_auto_20200303_1328'), ('base', '0034_auto_20200323_1036'), ('base', '0035_remove_target_client_match_rules'), ('base', '0036_auto_20200513_0724'), ('base', '0037_auto_20200604_1218'), ('base', '0038_auto_20200624_1213'), ('base', '0039_sendtodevicesinglescenetemplate'), ('base', '0040_auto_20201014_0405'), ('base', '0041_auto_20201012_0925'), ('base', '0042_auto_20201014_0603'), ('base', '0043_auto_20201104_0811')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClientMatchRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255, unique=True)),
                ('is_exclusion', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('description',),
            },
        ),
        migrations.CreateModel(
            name='SearchProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('identifier', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='SnippetTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('code', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('hidden', models.BooleanField(default=False, help_text='Hide from template selection dropdown')),
                ('priority', models.BooleanField(default=False, help_text='Set to true to display first in dropdowns for faster selections', verbose_name='Priority template')),
                ('code_name', models.CharField(max_length=255, unique=True)),
                ('version', models.CharField(default='1.0.0', max_length=10)),
                ('startpage', models.SmallIntegerField(default=4)),
            ],
            options={
                'ordering': ('-priority', 'name'),
            },
        ),
        migrations.CreateModel(
            name='SnippetTemplateVariable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.IntegerField(choices=[(4, 'Main Text'), (5, 'Rich Text'), (0, 'Text'), (2, 'Small Text'), (1, 'Image'), (3, 'Checkbox')], default=0)),
                ('description', models.TextField(blank=True, default='')),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ('order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='TargetedCountry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=16, unique=True, verbose_name='Geolocation Country')),
                ('name', models.CharField(max_length=100)),
                ('priority', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-priority', 'name', 'code'),
                'verbose_name_plural': 'targeted countries',
            },
        ),
        migrations.CreateModel(
            name='UploadedFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=snippets.base.models._generate_filename)),
                ('name', models.CharField(max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TargetedLocale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=100)),
                ('priority', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-priority', 'name', 'code'),
            },
        ),
        migrations.CreateModel(
            name='JSONSnippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('icon', models.TextField(help_text='Icon should be a 96x96px PNG.')),
                ('text', models.CharField(help_text='Maximum length 140 characters.', max_length=140)),
                ('url', models.CharField(max_length=500)),
                ('publish_start', models.DateTimeField(blank=True, null=True)),
                ('publish_end', models.DateTimeField(blank=True, null=True)),
                ('on_release', models.BooleanField(default=True, verbose_name='Release')),
                ('on_beta', models.BooleanField(default=False, verbose_name='Beta')),
                ('on_aurora', models.BooleanField(default=False, verbose_name='Aurora')),
                ('on_nightly', models.BooleanField(default=False, verbose_name='Nightly')),
                ('on_startpage_1', models.BooleanField(default=True, verbose_name='Version 1')),
                ('weight', models.IntegerField(choices=[(33, 'Appear 1/3rd as often as an average snippet'), (50, 'Appear half as often as an average snippet'), (66, 'Appear 2/3rds as often as an average snippet'), (100, 'Appear as often as an average snippet'), (150, 'Appear 1.5 times as often as an average snippet'), (200, 'Appear twice as often as an average snippet'), (300, 'Appear three times as often as an average snippet')], default=100, help_text='How often should this snippet be shown to users?', verbose_name='Prevalence')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('client_match_rules', models.ManyToManyField(blank=True, to='base.ClientMatchRule', verbose_name='Client Match Rules')),
                ('countries', models.ManyToManyField(blank=True, to='base.TargetedCountry', verbose_name='Targeted Countries')),
                ('locales', models.ManyToManyField(blank=True, to='base.TargetedLocale', verbose_name='Targeted Locales')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('on_esr', models.BooleanField(default=False, verbose_name='ESR')),
                ('published', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-modified',),
                'verbose_name': 'JSON Snippet',
            },
        ),
        migrations.CreateModel(
            name='Snippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('data', models.TextField(default='{}')),
                ('publish_start', models.DateTimeField(blank=True, null=True)),
                ('publish_end', models.DateTimeField(blank=True, null=True)),
                ('on_release', models.BooleanField(db_index=True, default=False, verbose_name='Release')),
                ('on_beta', models.BooleanField(db_index=True, default=False, verbose_name='Beta')),
                ('on_aurora', models.BooleanField(db_index=True, default=False, verbose_name='Dev Edition (old Aurora)')),
                ('on_nightly', models.BooleanField(db_index=True, default=False, verbose_name='Nightly')),
                ('on_startpage_1', models.BooleanField(default=False, verbose_name='Version 1')),
                ('on_startpage_2', models.BooleanField(default=False, verbose_name='Version 2')),
                ('on_startpage_3', models.BooleanField(default=False, verbose_name='Version 3')),
                ('on_startpage_4', models.BooleanField(db_index=True, default=False, verbose_name='Version 4')),
                ('weight', models.IntegerField(choices=[(2, 'Appear 1/50th as often as an average snippet'), (5, 'Appear 1/20th as often as an average snippet'), (10, 'Appear 1/10th as often as an average snippet'), (33, 'Appear 1/3rd as often as an average snippet'), (50, 'Appear half as often as an average snippet'), (66, 'Appear 2/3rds as often as an average snippet'), (100, 'Appear as often as an average snippet'), (150, 'Appear 1.5 times as often as an average snippet'), (200, 'Appear twice as often as an average snippet'), (300, 'Appear three times as often as an average snippet')], default=100, help_text='How often should this snippet be shown to users?', verbose_name='Prevalence')),
                ('campaign', models.CharField(blank=True, default='', help_text='Optional campaign name. Will be added in the stats ping. Will be used for snippet blocking if set.', max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('on_startpage_5', models.BooleanField(db_index=True, default=False, verbose_name='Activity Stream')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('on_esr', models.BooleanField(db_index=True, default=False, verbose_name='ESR')),
                ('published', models.BooleanField(db_index=True, default=False)),
                ('ready_for_review', models.BooleanField(default=False)),
                ('client_option_addon_check_type', models.CharField(default='any', max_length=20)),
                ('client_option_addon_name', models.CharField(blank=True, default='', max_length=100)),
                ('client_option_bookmarks_count_lower_bound', models.IntegerField(default=-1)),
                ('client_option_bookmarks_count_upper_bound', models.IntegerField(default=-1)),
                ('client_option_has_fxaccount', models.CharField(default='any', max_length=10)),
                ('client_option_is_default_browser', models.CharField(default='any', max_length=10)),
                ('client_option_is_developer', models.CharField(default='any', max_length=10)),
                ('client_option_profileage_lower_bound', models.IntegerField(default=-1)),
                ('client_option_profileage_upper_bound', models.IntegerField(default=-1)),
                ('client_option_screen_resolutions', models.CharField(default='0-1024;1024-1920;1920-50000', max_length=150)),
                ('client_option_sessionage_lower_bound', models.IntegerField(default=-1)),
                ('client_option_sessionage_upper_bound', models.IntegerField(default=-1)),
                ('client_option_version_lower_bound', models.CharField(default='any', max_length=20)),
                ('client_option_version_upper_bound', models.CharField(default='any', max_length=20)),
            ],
            options={
                'ordering': ('-modified',),
                'permissions': (('can_publish_on_release', 'Can publish snippets on Release'), ('can_publish_on_beta', 'Can publish snippets on Beta'), ('can_publish_on_aurora', 'Can publish snippets on Aurora'), ('can_publish_on_nightly', 'Can publish snippets on Nightly'), ('can_publish_on_esr', 'Can publish snippets on ESR')),
            },
        ),
        migrations.CreateModel(
            name='SnippetNG',
            fields=[
            ],
            options={
                'verbose_name': 'Snippet NG',
                'proxy': True,
                'verbose_name_plural': 'Snippets NG',
                'indexes': [],
            },
            bases=('base.snippet',),
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('on_release', models.BooleanField(db_index=True, default=False, verbose_name='Release')),
                ('on_beta', models.BooleanField(db_index=True, default=False, verbose_name='Beta')),
                ('on_aurora', models.BooleanField(db_index=True, default=False, verbose_name='Dev Edition (old Aurora)')),
                ('on_nightly', models.BooleanField(db_index=True, default=False, verbose_name='Nightly')),
                ('on_esr', models.BooleanField(db_index=True, default=False, verbose_name='ESR')),
                ('on_startpage_6', models.BooleanField(db_index=True, default=True, verbose_name='Activity Stream Router')),
                ('jexl_expr', models.TextField(blank=True, default='')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('filtr_browser_addon', models.CharField(blank=True, default='', max_length=250)),
                ('filtr_country', models.CharField(blank=True, default='', max_length=1250)),
                ('filtr_current_search_engine', models.CharField(blank=True, default='', max_length=250)),
                ('filtr_firefox_version', models.CharField(blank=True, default='', max_length=10)),
                ('filtr_is_default_browser', models.CharField(blank=True, default='', max_length=10)),
                ('filtr_is_developer', models.CharField(blank=True, default='', max_length=250)),
                ('filtr_previous_session_end', models.CharField(blank=True, default='', max_length=250)),
                ('filtr_profile_age_created', models.CharField(blank=True, default='', max_length=250)),
                ('filtr_total_bookmarks_count', models.CharField(blank=True, default='', max_length=250)),
                ('filtr_updates_autodownload_enabled', models.CharField(blank=True, default='', max_length=10)),
                ('filtr_updates_enabled', models.CharField(blank=True, default='', max_length=10)),
                ('filtr_uses_firefox_sync', models.CharField(blank=True, default='', max_length=10)),
                ('filtr_desktop_devices_count', models.CharField(blank=True, default='', max_length=250)),
                ('filtr_mobile_devices_count', models.CharField(blank=True, default='', max_length=250)),
                ('filtr_total_devices_count', models.CharField(blank=True, default='', max_length=250)),
                ('filtr_total_addons', models.CharField(blank=True, default='', max_length=250)),
                ('filtr_can_install_addons', models.CharField(blank=True, default='', max_length=250)),
                ('filtr_firefox_service', models.CharField(blank=True, default='', max_length=250)),
                ('filtr_operating_system', models.CharField(blank=True, default='', max_length=250)),
                ('filtr_needs_update', models.CharField(blank=True, default='', max_length=250)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField(help_text='Campaign slug. Will be added in the stats ping. Will be used for snippet blocking if set.', max_length=255, unique=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Addon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('url', models.URLField(unique=True)),
                ('guid', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ASRSnippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('data', models.TextField(default='{}')),
                ('status', models.IntegerField(choices=[(100, 'Draft'), (200, 'Ready for review'), (300, 'Approved'), (400, 'Published')], db_index=True, default=100)),
                ('campaign', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Campaign')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.SnippetTemplate')),
                ('publish_end', models.DateTimeField(blank=True, help_text='See the current time in <a target="_blank" href="http://time.is/UTC">UTC</a>', null=True, verbose_name='Publish Ends')),
                ('publish_start', models.DateTimeField(blank=True, help_text='See the current time in <a target="_blank" href="http://time.is/UTC">UTC</a>', null=True, verbose_name='Publish Starts')),
                ('weight', models.IntegerField(choices=[(33, 'Appear 1/3rd as often as an average snippet'), (50, 'Appear half as often as an average snippet'), (66, 'Appear 2/3rds as often as an average snippet'), (100, 'Appear as often as an average snippet'), (150, 'Appear 1.5 times as often as an average snippet'), (200, 'Appear twice as often as an average snippet'), (300, 'Appear three times as often as an average snippet')], default=100, help_text='How often should this snippet be shown to users?')),
                ('locales', models.ManyToManyField(blank=True, to='base.TargetedLocale', verbose_name='Targeted Locales')),
                ('for_qa', models.BooleanField(blank=True, default=False, help_text='Snippet used in QA Testing. Do not remove or unpublish.', verbose_name='For QA')),
                ('targets', models.ManyToManyField(blank=True, default=None, to='base.Target')),
            ],
            options={
                'verbose_name': 'ASR Snippet',
                'verbose_name_plural': 'ASR Snippets',
                'ordering': ['-modified'],
                'permissions': (('publish_on_release', 'Publish snippets on Release'), ('publish_on_beta', 'Publish snippets on Beta'), ('publish_on_aurora', 'Publish snippets on Aurora'), ('publish_on_nightly', 'Publish snippets on Nightly'), ('publish_on_esr', 'Publish snippets on ESR')),
            },
        ),
        migrations.DeleteModel(
            name='SnippetNG',
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField()),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'categories',
                'ordering': ('name',),
            },
        ),
        migrations.AddField(
            model_name='asrsnippet',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='snippets', to='base.Category'),
        ),
        migrations.CreateModel(
            name='Icon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('height', models.PositiveIntegerField(default=0)),
                ('width', models.PositiveIntegerField(default=0)),
                ('image', models.ImageField(height_field='height', help_text='PNG only. A reasonable file size is about 5 KiB. Note that updating the image will update all snippets using this image.', upload_to=snippets.base.models._generate_filename, width_field='width')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('snippet', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='template_ng', to='base.ASRSnippet')),
            ],
        ),
        migrations.CreateModel(
            name='SendToDeviceTemplate',
            fields=[
                ('template_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.Template')),
                ('scene1_title', models.CharField(blank=True, help_text='Snippet title displayed before snippet text.', max_length=255, verbose_name='Scene 1 Title')),
                ('scene1_text', models.TextField(help_text='Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br.', verbose_name='Scene 1 Text')),
                ('scene1_button_label', models.CharField(default='Learn more', help_text='Label for the button on Scene 1 that leads to Scene 2.', max_length=50, verbose_name='Scene 1 Button Label')),
                ('scene1_button_color', models.CharField(blank=True, help_text='The text color of the button. Valid CSS color. Defaults to Firefox Theme Color.', max_length=20, verbose_name='Scene 1 Button Color')),
                ('scene1_button_background_color', models.CharField(blank=True, help_text='The background color of the button. Valid CSS color. Defaults to Firefox Theme Color.', max_length=20, verbose_name='Scene 1 Button Background Color')),
                ('scene2_title', models.CharField(blank=True, help_text='Title displayed before text in scene 2.', max_length=255, verbose_name='Scene 2 Title')),
                ('scene2_text', models.TextField(help_text='Scene 2 main text. HTML subset allowed: i, b, u, strong, em, br.', verbose_name='Scene 2 Text')),
                ('scene2_button_label', models.CharField(default='Send', help_text='Label for form submit button.', max_length=50, verbose_name='Scene 2 Button Label')),
                ('scene2_input_placeholder', models.CharField(default='Your email here', help_text='Placeholder text for email / phone number field.', max_length=255, verbose_name='Scene 2 Input Placeholder')),
                ('scene2_dismiss_button_text', models.CharField(default='Dismiss', help_text='Label for the dismiss button on Scene 2.', max_length=50, verbose_name='Scene 2 Dismiss Button Text')),
                ('scene2_disclaimer_html', models.TextField(help_text='Text and link underneath the input box.', verbose_name='Scene 2 Disclaimer HTML')),
                ('locale', models.CharField(default='EN', help_text='Two to five character string for the locale code. Default "EN".', max_length=10)),
                ('country', models.CharField(default='us', help_text='Two character string for the country code (used for SMS). Default "us".', max_length=10)),
                ('include_sms', models.BooleanField(blank=True, default=False, help_text='Defines whether SMS is available.', verbose_name='Include SMS')),
                ('message_id_sms', models.CharField(blank=True, help_text='Newsletter/basket id representing the SMS message to be sent.', max_length=100, verbose_name='Message ID for SMS')),
                ('message_id_email', models.CharField(help_text='Newsletter/basket id representing the email message to be sent. Must be a value from the "Slug" column here: https://basket.mozilla.org/news/.', max_length=100, verbose_name='Message ID for Email')),
                ('success_title', models.TextField(help_text='Title of success message after form submission.', verbose_name='Success Title')),
                ('success_text', models.TextField(help_text='Text of success message after form submission.', verbose_name='Success Text')),
                ('error_text', models.TextField(help_text='Text of error message if form submission fails.', verbose_name='Error Text')),
                ('block_button_text', models.CharField(default='Remove this', help_text='Tooltip text used for dismiss button.', max_length=50, verbose_name='Block Button Text')),
                ('do_not_autoblock', models.BooleanField(blank=True, default=False, help_text='Used to prevent blocking the snippet after the CTA (link or button) has been clicked.', verbose_name='Do Not Autoblock')),
                ('scene1_icon', models.ForeignKey(help_text='Snippet icon. 192x192 PNG.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='sendtodevice_scene1_icons', to='base.Icon', verbose_name='Scene 1 Icon')),
                ('scene1_title_icon', models.ForeignKey(blank=True, help_text='Small icon that shows up before the title / text. 64x64px.PNG. Grayscale.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='sendtodevice_scene1_title_icons', to='base.Icon', verbose_name='Scene 1 Title Icon')),
                ('scene2_icon', models.ForeignKey(help_text='Image to display above the form. 192x192px PNG.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='sendtodevice_scene2_icons', to='base.Icon', verbose_name='Scene 2 Icon')),
                ('scene1_section_title_icon', models.ForeignKey(blank=True, help_text='Section title icon. 64x64px. PNG. scene1_section_title_text must also be specified to display.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='sendtodevice_scene1_section_icons', to='base.Icon', verbose_name='Section Title Icon')),
                ('scene1_section_title_text', models.CharField(blank=True, help_text='Section title text. scene1_section_title_icon must also be specified to display.', max_length=255, verbose_name='Section Title Text')),
                ('scene1_section_title_url', snippets.base.fields.URLField(blank=True, help_text='A url, scene1_section_title_text links to this', max_length=500, verbose_name='Section Title URL')),
                ('retry_button_label', models.CharField(default='Try again', help_text='Button label after a failed form submission', max_length=50, verbose_name='Retry Button Label')),
            ],
            bases=('base.template',),
        ),
        migrations.RemoveField(
            model_name='asrsnippet',
            name='template',
        ),
        migrations.AlterField(
            model_name='template',
            name='snippet',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='template_relation', to='base.ASRSnippet'),
        ),
        migrations.CreateModel(
            name='FundraisingTemplate',
            fields=[
                ('template_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.Template')),
                ('donation_form_url', snippets.base.fields.URLField(default='https://donate.mozilla.org/?utm_source=desktop-snippet&utm_medium=snippet', max_length=500, verbose_name='Donation Form URL')),
                ('currency_code', models.CharField(default='usd', max_length=10, verbose_name='Currency Code')),
                ('locale', models.CharField(default='en-US', max_length=10)),
                ('title', models.CharField(blank=True, help_text='Snippet title displayed before snippet text.', max_length=255)),
                ('text', models.TextField(help_text='Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br')),
                ('text_color', models.CharField(blank=True, max_length=10, verbose_name='Text Color')),
                ('background_color', models.CharField(blank=True, max_length=10, verbose_name='Background Color')),
                ('highlight_color', models.CharField(blank=True, default='#FFE900', help_text='Paragraph em highlight color.', max_length=10, verbose_name='Highlight Color')),
                ('donation_amount_first', models.PositiveSmallIntegerField(verbose_name='First')),
                ('donation_amount_second', models.PositiveSmallIntegerField(verbose_name='Second')),
                ('donation_amount_third', models.PositiveSmallIntegerField(verbose_name='Third')),
                ('donation_amount_fourth', models.PositiveSmallIntegerField(verbose_name='Fourth')),
                ('selected_button', models.CharField(choices=[('donation_amount_first', 'First'), ('donation_amount_second', 'Second'), ('donation_amount_third', 'Third'), ('donation_amount_fourth', 'Fourth')], default='donation_amount_second', help_text="Donation amount button that's selected by default.", max_length=25, verbose_name='Selected Button')),
                ('button_label', models.CharField(help_text='Text for a button next to main snippet text that links to button_url. Requires button_url.', max_length=50, verbose_name='Button Label')),
                ('button_color', models.CharField(blank=True, help_text='defaults to firefox theme', max_length=20, verbose_name='Button Color')),
                ('button_background_color', models.CharField(blank=True, help_text='defaults to firefox theme', max_length=20, verbose_name='Button Background Color')),
                ('monthly_checkbox_label_text', models.CharField(default='Make my donation monthly', max_length=255, verbose_name='Monthly Checkbox Label Text')),
                ('test', models.CharField(blank=True, choices=[('', 'Default'), ('bold', 'Bold'), ('takeover', 'Takeover')], help_text='Different styles for the snippet.', max_length=10)),
                ('block_button_text', models.CharField(default='Remove this', help_text='Tooltip text used for dismiss button.', max_length=50, verbose_name='Block Button Text')),
                ('do_not_autoblock', models.BooleanField(blank=True, default=False, help_text='Used to prevent blocking the snippet after the CTA (link or button) has been clicked.', verbose_name='Do Not Autoblock')),
                ('icon', models.ForeignKey(help_text='Snippet icon. 192x192px PNG.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='fundraising_icons', to='base.Icon')),
                ('title_icon', models.ForeignKey(blank=True, help_text='Small icon that shows up before the title / text. 64x64px.PNG. Grayscale.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='fundraising_title_icons', to='base.Icon', verbose_name='Title Icon')),
            ],
            bases=('base.template',),
        ),
        migrations.CreateModel(
            name='FxASignupTemplate',
            fields=[
                ('template_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.Template')),
                ('scene1_title', models.CharField(blank=True, help_text='Snippet title displayed before snippet text.', max_length=255, verbose_name='Scene 1 Title')),
                ('scene1_text', models.TextField(help_text='Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br.', verbose_name='Scene 1 Text')),
                ('scene1_button_label', models.CharField(default='Learn more', help_text='Label for the button on Scene 1 that leads to Scene 2.', max_length=50, verbose_name='Scene 1 Button Label')),
                ('scene1_button_color', models.CharField(blank=True, help_text='The text color of the button. Valid CSS color. Defaults to Firefox Theme Color.', max_length=20, verbose_name='Scene 1 Button Color')),
                ('scene1_button_background_color', models.CharField(blank=True, help_text='The background color of the button. Valid CSS color. Defaults to Firefox Theme Color.', max_length=20, verbose_name='Scene 1 Button Background Color')),
                ('scene2_title', models.CharField(blank=True, help_text='Title displayed before text in scene 2.', max_length=255, verbose_name='Scene 2 Title')),
                ('scene2_text', models.TextField(help_text='Scene 2 main text. HTML subset allowed: i, b, u, strong, em, br.', verbose_name='Scene 2 Text')),
                ('scene2_button_label', models.CharField(default='Sign me up', help_text='Label for form submit button.', max_length=50, verbose_name='Scene 2 Button Label')),
                ('scene2_email_placeholder_text', models.CharField(default='Your email here', help_text='Value to show while input is empty.', max_length=255, verbose_name='Scene 2 Email Placeholder Text')),
                ('scene2_dismiss_button_text', models.CharField(default='Dismiss', help_text='Label for the dismiss button on Scene 2.', max_length=50, verbose_name='Scene 2 Dismiss Button Text')),
                ('utm_term', models.CharField(blank=True, help_text='Value to pass through to GA as utm_term.', max_length=100, verbose_name='UTM Term')),
                ('utm_campaign', models.CharField(blank=True, help_text='Value to pass through to GA as utm_campaign.', max_length=100, verbose_name='UTM Campaign')),
                ('block_button_text', models.CharField(default='Remove this', help_text='Tooltip text used for dismiss button.', max_length=50, verbose_name='Block Button Text')),
                ('do_not_autoblock', models.BooleanField(blank=True, default=False, help_text='Used to prevent blocking the snippet after the CTA (link or button) has been clicked.', verbose_name='Do Not Autoblock')),
                ('scene1_icon', models.ForeignKey(help_text='Snippet icon. 192x192px PNG.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='fxasignup_scene1_icons', to='base.Icon', verbose_name='Scene 1 Icon')),
                ('scene1_title_icon', models.ForeignKey(blank=True, help_text='Small icon that shows up before the title / text. 64x64px.PNG. Grayscale.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='fxasignup_scene1_title_icons', to='base.Icon', verbose_name='Scene 1 Title Icon')),
                ('scene1_section_title_icon', models.ForeignKey(blank=True, help_text='Section title icon. 64x64px. PNG. scene1_section_title_text must also be specified to display.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='fxa_scene1_section_icons', to='base.Icon', verbose_name='Section Title Icon')),
                ('scene1_section_title_text', models.CharField(blank=True, help_text='Section title text. scene1_section_title_icon must also be specified to display.', max_length=255, verbose_name='Section Title Text')),
                ('scene1_section_title_url', snippets.base.fields.URLField(blank=True, help_text='A url, scene1_section_title_text links to this', max_length=500, verbose_name='Section Title URL')),
            ],
            bases=('base.template',),
        ),
        migrations.CreateModel(
            name='NewsletterTemplate',
            fields=[
                ('template_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.Template')),
                ('scene1_title', models.CharField(blank=True, help_text='Snippet title displayed before snippet text.', max_length=255, verbose_name='Scene 1 Title')),
                ('scene1_text', models.TextField(help_text='Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br.', verbose_name='Scene 1 Text')),
                ('scene1_button_label', models.CharField(default='Learn more', help_text='Label for the button on Scene 1 that leads to Scene 2.', max_length=50, verbose_name='Scene 1 Button Label')),
                ('scene1_button_color', models.CharField(blank=True, help_text='The text color of the button. Valid CSS color. Defaults to Firefox Theme Color.', max_length=20, verbose_name='Scene 1 Button Color')),
                ('scene1_button_background_color', models.CharField(blank=True, help_text='The background color of the button. Valid CSS color. Defaults to Firefox Theme Color.', max_length=20, verbose_name='Scene 1 Button Background Color')),
                ('scene2_title', models.CharField(blank=True, help_text='Title displayed before text in scene 2.', max_length=255, verbose_name='Scene 2 Title')),
                ('scene2_text', models.TextField(help_text='Scene 2 main text. HTML subset allowed: i, b, u, strong, em, br.', verbose_name='Scene 2 Text')),
                ('scene2_button_label', models.CharField(default='Sign me up', help_text='Label for form submit button.', max_length=50, verbose_name='Scene 2 Button Label')),
                ('scene2_email_placeholder_text', models.CharField(default='Your email here', help_text='Value to show while input is empty.', max_length=255, verbose_name='Scene 2 Email Placeholder Text')),
                ('scene2_dismiss_button_text', models.CharField(default='Dismiss', help_text='Label for the dismiss button on Scene 2.', max_length=50, verbose_name='Scene 2 Dismiss Button Text')),
                ('scene2_newsletter', models.CharField(default='mozilla-foundation', help_text='Newsletter/basket id user is subscribing to. Must be a value from the "Slug" column here: https://basket.mozilla.org/news/.', max_length=50, verbose_name='Scene 2 Newsletter')),
                ('scene2_privacy_html', models.TextField(help_text='Text and link next to the privacy checkbox. Must link to a privacy policy.', verbose_name='Scene 2 Privacy HTML')),
                ('locale', models.CharField(default='en-US', help_text='String for the newsletter locale code.', max_length=10)),
                ('success_text', models.TextField(help_text='Text of success message after form submission.', verbose_name='Success Text')),
                ('error_text', models.TextField(help_text='Text of error message if form submission fails.', verbose_name='Error Text')),
                ('block_button_text', models.CharField(default='Remove this', help_text='Tooltip text used for dismiss button.', max_length=50, verbose_name='Block Button Text')),
                ('do_not_autoblock', models.BooleanField(blank=True, default=False, help_text='Used to prevent blocking the snippet after the CTA (link or button) has been clicked.', verbose_name='Do Not Autoblock')),
                ('scene1_icon', models.ForeignKey(help_text='Snippet icon. 192x192px PNG.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='newsletter_scene1_icons', to='base.Icon', verbose_name='Scene 1 Icon')),
                ('scene1_title_icon', models.ForeignKey(blank=True, help_text='Small icon that shows up before the title / text. 64x64px.PNG. Grayscale.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='newsletter_scene1_title_icons', to='base.Icon', verbose_name='Scene 1 Title Icon')),
                ('scene1_section_title_icon', models.ForeignKey(blank=True, help_text='Section title icon. 64x64px. PNG. scene1_section_title_text must also be specified to display.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='newsletter_scene1_section_icons', to='base.Icon', verbose_name='Section Title Icon')),
                ('scene1_section_title_text', models.CharField(blank=True, help_text='Section title text. scene1_section_title_icon must also be specified to display.', max_length=255, verbose_name='Section Title Text')),
                ('scene1_section_title_url', snippets.base.fields.URLField(blank=True, help_text='A url, scene1_section_title_text links to this', max_length=500, verbose_name='Section Title URL')),
                ('retry_button_label', models.CharField(default='Try again', help_text='Button label after a failed form submission', max_length=50, verbose_name='Retry Button Label')),
            ],
            bases=('base.template',),
        ),
        migrations.CreateModel(
            name='SimpleTemplate',
            fields=[
                ('template_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.Template')),
                ('title', models.CharField(blank=True, help_text='Snippet title displayed before snippet text.', max_length=255)),
                ('text', models.TextField(help_text='Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br')),
                ('button_label', models.CharField(blank=True, help_text='Text for a button next to main snippet text that links to button_url. Requires button_url.', max_length=50, verbose_name='Button Label')),
                ('button_color', models.CharField(blank=True, help_text='The text color of the button. Valid CSS color.', max_length=20, verbose_name='Button Color')),
                ('button_url', snippets.base.fields.URLField(blank=True, help_text='A url, button_label links to this', max_length=500, verbose_name='Button URL')),
                ('section_title_text', models.CharField(blank=True, help_text='Section title text. section_title_icon must also be specified to display.', max_length=255, verbose_name='Section Title Text')),
                ('section_title_url', snippets.base.fields.URLField(blank=True, help_text='A url, section_title_text links to this', max_length=500, verbose_name='Section Title URL')),
                ('tall', models.BooleanField(blank=True, default=False, help_text='To be used by fundraising only, increases height to roughly 120px. Defaults to false.')),
                ('block_button_text', models.CharField(default='Remove this', help_text='Tooltip text used for dismiss button.', max_length=50, verbose_name='Block Button Text')),
                ('do_not_autoblock', models.BooleanField(blank=True, default=False, help_text='Used to prevent blocking the snippet after the CTA (link or button) has been clicked.', verbose_name='Do Not Autoblock')),
                ('icon', models.ForeignKey(help_text='Snippet icon. 192x192px PNG.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='simple_icons', to='base.Icon')),
                ('section_title_icon', models.ForeignKey(blank=True, help_text='Section title icon. 64x64px. PNG. section_title_text must also be specified to display.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='simple_section_icons', to='base.Icon', verbose_name='Section Title Icon')),
                ('title_icon', models.ForeignKey(blank=True, help_text='Small icon that shows up before the title / text. 64x64px.PNG. Grayscale.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='simple_title_icons', to='base.Icon', verbose_name='Title Icon')),
                ('button_background_color', models.CharField(blank=True, help_text='The text color of the button. Valid CSS color.', max_length=20, verbose_name='Button Background Color')),
            ],
            bases=('base.template',),
        ),
        migrations.DeleteModel(
            name='UploadedFile',
        ),
        migrations.RemoveField(
            model_name='asrsnippet',
            name='data',
        ),
        migrations.DeleteModel(
            name='JSONSnippet',
        ),
        migrations.RemoveField(
            model_name='asrsnippet',
            name='weight',
        ),
        migrations.RemoveField(
            model_name='asrsnippet',
            name='campaign',
        ),
        migrations.RemoveField(
            model_name='asrsnippet',
            name='targets',
        ),
        migrations.CreateModel(
            name='Locale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(help_text='Comma separated list of locales with or without territory information. E.g `en-us` and `es-mx,es-ar`', max_length=255, unique=True, validators=[django.core.validators.RegexValidator(regex='^,?([A-Za-z-]+,?)+$')])),
                ('translations', models.TextField(blank=True, default='{}', help_text='JSON dictionary with Template fields as keys and localized strings as values.', validators=[snippets.base.validators.validate_json_data])),
                ('rtl', models.BooleanField(default=False, help_text='Is Right-To-Left language?')),
            ],
            options={
                'ordering': ('name', 'code'),
            },
        ),
        migrations.AddField(
            model_name='asrsnippet',
            name='locale',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Locale'),
        ),
        migrations.RemoveField(
            model_name='asrsnippet',
            name='locales',
        ),
        migrations.AddField(
            model_name='asrsnippet',
            name='tags',
            field=taggit_selectize.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.RemoveField(
            model_name='asrsnippet',
            name='for_qa',
        ),
        migrations.AlterField(
            model_name='asrsnippet',
            name='status',
            field=models.IntegerField(choices=[(100, 'Draft'), (200, 'Ready for review'), (300, 'Approved')], db_index=True, default=100, verbose_name='Content Status'),
        ),
        migrations.CreateModel(
            name='SimpleBelowSearchTemplate',
            fields=[
                ('template_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.Template')),
                ('text', models.TextField(help_text='Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br')),
                ('block_button_text', models.CharField(default='Remove this', help_text='Tooltip text used for dismiss button.', max_length=50, verbose_name='Block Button Text')),
                ('do_not_autoblock', models.BooleanField(blank=True, default=False, help_text='Used to prevent blocking the snippet after the CTA (link or button) has been clicked.', verbose_name='Do Not Autoblock')),
                ('icon', models.ForeignKey(help_text='Snippet icon. 192x192px PNG.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='simple_below_search_icons', to='base.Icon')),
                ('button_background_color', models.CharField(blank=True, help_text='The text color of the button. Valid CSS color.', max_length=20, verbose_name='Button Background Color')),
                ('button_color', models.CharField(blank=True, help_text='The text color of the button. Valid CSS color.', max_length=20, verbose_name='Button Color')),
                ('button_label', models.CharField(blank=True, help_text='Text for a button next to main snippet text that links to button_url. Requires button_url.', max_length=50, verbose_name='Button Label')),
                ('button_url', snippets.base.fields.URLField(blank=True, help_text='A url, button_label links to this', max_length=500, verbose_name='Button URL')),
                ('title', models.CharField(blank=True, help_text='Snippet title displayed before snippet text.', max_length=255)),
            ],
            bases=('base.template',),
        ),
        migrations.RemoveField(
            model_name='asrsnippet',
            name='publish_end',
        ),
        migrations.RemoveField(
            model_name='asrsnippet',
            name='publish_start',
        ),
        migrations.CreateModel(
            name='Distribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='DistributionBundle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('code_name', models.CharField(max_length=100, unique=True)),
                ('distributions', models.ManyToManyField(to='base.Distribution')),
                ('enabled', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('status', models.IntegerField(choices=[(0, 'Draft'), (100, 'Scheduled'), (200, 'Published'), (300, 'Canceled'), (400, 'Completed')], db_index=True, default=0, editable=False)),
                ('weight', models.IntegerField(choices=[(2, 'Appear 1/50th as often as an average snippet'), (5, 'Appear 1/20th as often as an average snippet'), (10, 'Appear 1/10th as often as an average snippet'), (33, 'Appear 1/3rd as often as an average snippet'), (50, 'Appear half as often as an average snippet'), (66, 'Appear 2/3rds as often as an average snippet'), (100, 'Appear as often as an average snippet'), (150, 'Appear 1.5 times as often as an average snippet'), (200, 'Appear twice as often as an average snippet'), (300, 'Appear three times as often as an average snippet')], default=100, help_text='How often should this snippet be shown to users?')),
                ('publish_start', models.DateTimeField(blank=True, help_text='See the current time in <a target="_blank" href="https://time.is/UTC">UTC</a>', null=True, verbose_name='Publish Starts')),
                ('publish_end', models.DateTimeField(blank=True, help_text='See the current time in <a target="_blank" href="https://time.is/UTC">UTC</a>', null=True, verbose_name='Publish Ends')),
                ('campaign', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='jobs', to='base.Campaign')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('snippet', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='jobs', to='base.ASRSnippet')),
                ('targets', models.ManyToManyField(default=None, related_name='jobs', to='base.Target')),
                ('distribution', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='jobs', to='base.Distribution')),
                ('metric_blocks', models.PositiveIntegerField(default=0, editable=False)),
                ('metric_clicks', models.PositiveIntegerField(default=0, editable=False)),
                ('metric_impressions', models.PositiveIntegerField(default=0, editable=False)),
                ('metric_last_update', models.DateTimeField(default='1970-01-01', editable=False, verbose_name='Last Update')),
                ('limit_blocks', models.PositiveIntegerField(blank=True, default=0, help_text='Job will complete if number of Blocks exceeds this number. Set to 0 to disable.', verbose_name='Global Block Limit')),
                ('limit_clicks', models.PositiveIntegerField(blank=True, default=0, help_text='Job will complete if number of Clicks exceeds this number. Set to 0 to disable.', verbose_name='Global Clicks Limit')),
                ('limit_impressions', models.PositiveIntegerField(blank=True, default=0, help_text='Job will complete if number of Impressions exceeds this number. Set to 0 to disable.', verbose_name='Global Impressions Limit')),
                ('client_limit_lifetime', models.PositiveIntegerField(default=0, verbose_name='Max Lifetime Impressions')),
                ('client_limit_per_day', models.PositiveIntegerField(default=0, verbose_name='Max Daily Impressions')),
                ('client_limit_per_fortnight', models.PositiveIntegerField(default=0, verbose_name='Max Fortnightly Impressions')),
                ('client_limit_per_hour', models.PositiveIntegerField(default=0, verbose_name='Max Hourly Impressions')),
                ('client_limit_per_month', models.PositiveIntegerField(default=0, verbose_name='Max Monthly Impressions')),
                ('client_limit_per_week', models.PositiveIntegerField(default=0, verbose_name='Max Weekly Impressions')),
                ('completed_on', models.DateTimeField(editable=False, null=True)),
            ],
            options={
                'ordering': ['-modified'],
            },
        ),
        migrations.AlterModelOptions(
            name='asrsnippet',
            options={'ordering': ['-modified'], 'verbose_name': 'ASR Snippet', 'verbose_name_plural': 'ASR Snippets'},
        ),
        migrations.AlterField(
            model_name='asrsnippet',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='snippets', to='base.Category'),
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField()),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'products',
                'ordering': ('name',),
            },
        ),
        migrations.AddField(
            model_name='asrsnippet',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='snippets', to='base.Product'),
        ),
        migrations.CreateModel(
            name='DailyImpressions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_fetched_on', models.DateTimeField(auto_now_add=True)),
                ('date', models.DateField(db_index=True, editable=False, unique=True)),
                ('details', django.contrib.postgres.fields.jsonb.JSONField(default=dict, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='SendToDeviceSingleSceneTemplate',
            fields=[
                ('template_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.Template')),
                ('section_title_text', models.CharField(blank=True, help_text='Section title text. section_title_icon must also be specified to display.', max_length=255, verbose_name='Section Title Text')),
                ('section_title_url', snippets.base.fields.URLField(blank=True, help_text='A url, section_title_text links to this', max_length=500, verbose_name='Section Title URL')),
                ('text', models.TextField(help_text='Main text.', verbose_name='Text')),
                ('button_label', models.CharField(default='Send', help_text='Label for form submit button.', max_length=50, verbose_name='Button Label')),
                ('input_placeholder', models.CharField(default='Your email here', help_text='Placeholder text for email / phone number field.', max_length=255, verbose_name='Input Placeholder')),
                ('disclaimer_html', models.TextField(help_text='Text and link underneath the input box. HTML subset allowed: i, b, u, strong, em, br.', verbose_name='Disclaimer HTML')),
                ('locale', models.CharField(default='EN', help_text='Two to five character string for the locale code. Default "EN".', max_length=10)),
                ('country', models.CharField(default='us', help_text='Two character string for the country code (used for SMS). Default "us".', max_length=10)),
                ('include_sms', models.BooleanField(blank=True, default=False, help_text='Defines whether SMS is available.', verbose_name='Include SMS')),
                ('message_id_sms', models.CharField(blank=True, help_text='Newsletter/basket id representing the SMS message to be sent.', max_length=100, verbose_name='Message ID for SMS')),
                ('message_id_email', models.CharField(help_text='Newsletter/basket id representing the email message to be sent. Must be a value from the "Slug" column here: https://basket.mozilla.org/news/.', max_length=100, verbose_name='Message ID for Email')),
                ('success_title', models.TextField(help_text='Title of success message after form submission.', verbose_name='Success Title')),
                ('success_text', models.TextField(help_text='Text of success message after form submission.', verbose_name='Success Text')),
                ('error_text', models.TextField(help_text='Text of error message if form submission fails.', verbose_name='Error Text')),
                ('retry_button_label', models.CharField(default='Try again', help_text='Button label after a failed form submission', max_length=50, verbose_name='Retry Button Label')),
                ('block_button_text', models.CharField(default='Remove this', help_text='Tooltip text used for dismiss button.', max_length=50, verbose_name='Block Button Text')),
                ('do_not_autoblock', models.BooleanField(blank=True, default=False, help_text='Used to prevent blocking the snippet after the CTA (link or button) has been clicked.', verbose_name='Do Not Autoblock')),
                ('icon', models.ForeignKey(help_text='Image to display above the form. 192x192px PNG.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='sendtodevicesinglescene_icons', to='base.Icon', verbose_name='Icon')),
                ('section_title_icon', models.ForeignKey(blank=True, help_text='Section title icon. 64x64px. PNG. section_title_text must also be specified to display.', null=True, on_delete=snippets.base.models.Icon.check_if_icon_can_be_deleted, related_name='sendtodevicesinglescene_section_icons', to='base.Icon', verbose_name='Section Title Icon')),
            ],
            bases=('base.template',),
        ),
        migrations.CreateModel(
            name='JobDailyPerformance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_fetched_on', models.DateTimeField(auto_now_add=True)),
                ('date', models.DateField(db_index=True, editable=False)),
                ('impression', models.PositiveIntegerField(default=0, editable=False)),
                ('adj_impression', models.PositiveIntegerField(default=0, editable=False)),
                ('click', models.PositiveIntegerField(default=0, editable=False)),
                ('block', models.PositiveIntegerField(default=0, editable=False)),
                ('dismiss', models.PositiveIntegerField(default=0, editable=False)),
                ('go_to_scene2', models.PositiveIntegerField(default=0, editable=False)),
                ('subscribe_success', models.PositiveIntegerField(default=0, editable=False)),
                ('subscribe_error', models.PositiveIntegerField(default=0, editable=False)),
                ('other_click', models.PositiveIntegerField(default=0, editable=False)),
                ('details', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='metrics', to='base.Job')),
                ('impression_no_clients_total', models.PositiveIntegerField(default=0, editable=False)),
                ('adj_client_percentage', models.FloatField(default=0, editable=False)),
                ('adj_impression_percentage', models.FloatField(default=0, editable=False)),
            ],
            options={
                'ordering': ('-id',),
                'unique_together': {('job', 'date')},
            },
        ),
        migrations.DeleteModel(
            name='ClientMatchRule',
        ),
        migrations.DeleteModel(
            name='SearchProvider',
        ),
        migrations.DeleteModel(
            name='Snippet',
        ),
        migrations.DeleteModel(
            name='SnippetTemplate',
        ),
        migrations.DeleteModel(
            name='SnippetTemplateVariable',
        ),
        migrations.DeleteModel(
            name='TargetedLocale',
        ),
    ]
